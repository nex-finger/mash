     1                                  ; mash
     2                                  ; TAB=4
     3                                  
     4                                  ; ロゴ
     5                                  ; https://jp.mathworks.com/matlabcentral/fileexchange/181715-makebanner-big-ascii-style-comment-generator
     6                                  
     7                                  ; --- ファイルインクルード ---
     8                                  %include        "../asm/define.asm"
     1                              <1> ; --- 画面関連 ---
     2                              <1> %define     DISP_COLSIZE    79
     3                              <1> %define     DISP_LINESIZE   24
     4                              <1> 
     5                              <1> ; --- ディレクトリ構造 ---
     6                              <1> ; root
     7                              <1> %define     DIR_ROOT        0x0015
     8                              <1> 
     9                              <1> ; root一覧
    10                              <1> %define     DIR_BIN         0x0016
    11                              <1> %define     DIR_USR         0x0017
    12                              <1> %define     DIR_README      0x0018
    13                              <1> 
    14                              <1> ; bin一覧
    15                              <1> %define     DIR_TEST        0x0019
    16                              <1> 
    17                              <1> ; --- ディレクトセクタ ---
    18                              <1> ; アトリビュート
    19                              <1> %define     ATR_EMPTY       0x00
    20                              <1> %define     ATR_DIR         0x01
    21                              <1> %define     ATR_FILE        0x02
    22                              <1> 
    23                              <1> ; --- 入出力 ---
    24                              <1> ; ファイルディスクリプタ
    25                              <1> %define     FD_KEYBORD      0x00
    26                              <1> %define     FD_DISPLAY      0x01
    27                              <1> %define     FD_SERIAL       0x02
    28                              <1> %define     FD_FILE0        0x03
    29                              <1> %define     FD_FILE1        0x04
    30                              <1> %define     FD_FILE2        0x05
    31                              <1> %define     FD_FILE3        0x06
    32                              <1> 
    33                              <1> ; --- マクロ ---
    34                              <1> ; シリアル初期化
    35                              <1> %macro MACRO_SERIAL_INIT 0
    36                              <1>         MOV     AH, 0x00                ; シリアルポート設定
    37                              <1>         MOV     AL, 0xe3                ; 0bBBBPPSCC, 9600bps, None, 1bit, 8bit
    38                              <1>         MOV     DX, 0x0000              ; 0ch = COM1, xch = COMx+1
    39                              <1>         INT     0x14
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> ; シリアル1文字出力
    43                              <1> %macro MACRO_SERIAL_PUTC 1
    44                              <1>         PUSH    AX
    45                              <1>         MOV     AL, %1
    46                              <1>         CALL    dbgSingle
    47                              <1>         POP     AX
    48                              <1> %endmacro
     9                                  %define         __DEBUG                 ; デバッグ時に有効
    10                                  
    11                                          ORG     0x4000
    12 00000000 E9F101                          JMP     mashInit
    13                                  
    14                                  ; //////////////////////////////////////////////////////////////////////////// ;
    15                                  ; --- 定数 ---
    16                                  ;  ██████╗ ██████╗ ███╗  ██╗ ██████╗████████╗
    17                                  ; ██╔════╝██╔═══██╗████╗ ██║██╔════╝╚══██╔══╝
    18                                  ; ██║     ██║   ██║██╔██╗██║╚█████╗    ██║   
    19                                  ; ██║     ██║   ██║██║╚████║ ╚═══██╗   ██║   
    20                                  ; ╚██████╗╚██████╔╝██║ ╚███║██████╔╝   ██║   
    21                                  ;  ╚═════╝ ╚═════╝ ╚═╝  ╚══╝╚═════╝    ╚═╝   
    22                                  ; //////////////////////////////////////////////////////////////////////////// ;
    23                                  cMashLogo:                              ; ロゴ(35x6 = 210byte)
    24                                          ;       ███╗   ███╗                                                        █████╗                                          ██████╗                                        ██╗  ██╗
    25                                          ;       ████╗ ████║                                                       ██╔══██╗                                        ██╔════╝                                        ██║  ██║
    26                                          ;       ██╔████╔██║                                                       ██║  ██║                                        ╚█████╗                                         ███████║
    27                                          ;       ██║╚██╔╝██║                                                       ███████║                                         ╚═══██╗                                        ██╔══██║
    28                                          ;       ██║ ╚═╝ ██║                                                       ██╔══██║                                        ██████╔╝                                        ██║  ██║
    29                                          ;       ╚═╝     ╚═╝                                                       ╚═╝  ╚═╝                                        ╚═════╝                                         ╚═╝  ╚═╝
    30                                          ;       M                                                                 A                                               S                                               H                                             
    31 00000003 DBDBDBBB202020DBDB-             DB      0xdb, 0xdb, 0xdb, 0xbb, 0x20, 0x20, 0x20, 0xdb, 0xdb, 0xdb, 0xbb, 0x20, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xbb, 0x20, 0x20, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xbb, 0xdb, 0xdb, 0xbb, 0x20, 0x20, 0xdb, 0xdb, 0xbb
    31 0000000C DBBB20DBDBDBDBDBBB-
    31 00000015 2020DBDBDBDBDBDBBB-
    31 0000001E DBDBBB2020DBDBBB   
    32 00000026 DBDBDBDBBB20DBDBDB-             DB      0xdb, 0xdb, 0xdb, 0xdb, 0xbb, 0x20, 0xdb, 0xdb, 0xdb, 0xdb, 0xba, 0xdb, 0xdb, 0xc9, 0xcd, 0xcd, 0xdb, 0xdb, 0xbb, 0xdb, 0xdb, 0xc9, 0xcd, 0xcd, 0xcd, 0xcd, 0xbc, 0xdb, 0xdb, 0xba, 0x20, 0x20, 0xdb, 0xdb, 0xba
    32 0000002F DBBADBDBC9CDCDDBDB-
    32 00000038 BBDBDBC9CDCDCDCDBC-
    32 00000041 DBDBBA2020DBDBBA   
    33 00000049 DBDBC9DBDBDBDBC9DB-             DB      0xdb, 0xdb, 0xc9, 0xdb, 0xdb, 0xdb, 0xdb, 0xc9, 0xdb, 0xdb, 0xba, 0xdb, 0xdb, 0xba, 0x20, 0x20, 0xdb, 0xdb, 0xba, 0xc8, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xbb, 0x20, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xba
    33 00000052 DBBADBDBBA2020DBDB-
    33 0000005B BAC8DBDBDBDBDBBB20-
    33 00000064 DBDBDBDBDBDBDBBA   
    34 0000006C DBDBBAC8DBDBC9BCDB-             DB      0xdb, 0xdb, 0xba, 0xc8, 0xdb, 0xdb, 0xc9, 0xbc, 0xdb, 0xdb, 0xba, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xba, 0x20, 0xc8, 0xcd, 0xcd, 0xcd, 0xdb, 0xdb, 0xbb, 0xdb, 0xdb, 0xc9, 0xcd, 0xcd, 0xdb, 0xdb, 0xba
    34 00000075 DBBADBDBDBDBDBDBDB-
    34 0000007E BA20C8CDCDCDDBDBBB-
    34 00000087 DBDBC9CDCDDBDBBA   
    35 0000008F DBDBBA20C8CDBC20DB-             DB      0xdb, 0xdb, 0xba, 0x20, 0xc8, 0xcd, 0xbc, 0x20, 0xdb, 0xdb, 0xba, 0xdb, 0xdb, 0xc9, 0xcd, 0xcd, 0xdb, 0xdb, 0xba, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xc9, 0xbc, 0xdb, 0xdb, 0xba, 0x20, 0x20, 0xdb, 0xdb, 0xba
    35 00000098 DBBADBDBC9CDCDDBDB-
    35 000000A1 BADBDBDBDBDBDBC9BC-
    35 000000AA DBDBBA2020DBDBBA   
    36 000000B2 C8CDBC2020202020C8-             DB      0xc8, 0xcd, 0xbc, 0x20, 0x20, 0x20, 0x20, 0x20, 0xc8, 0xcd, 0xbc, 0xc8, 0xcd, 0xbc, 0x20, 0x20, 0xc8, 0xcd, 0xbc, 0xc8, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xbc, 0x20, 0xc8, 0xcd, 0xbc, 0x20, 0x20, 0xc8, 0xcd, 0xbc
    36 000000BB CDBCC8CDBC2020C8CD-
    36 000000C4 BCC8CDCDCDCDCDBC20-
    36 000000CD C8CDBC2020C8CDBC   
    37                                  
    38                                  cVersionLen:                            ; 版数文字列の長さ
    39 000000D5 1200                            DW      18
    40                                  
    41                                  cVersionStr:                            ; 版数文字列の内容
    42 000000D7 6D6173682073797374-             DB      "mash system v0.1.1"
    42 000000E0 656D2076302E312E31 
    43                                  
    44                                  ; //////////////////////////////////////////////////////////////////////////// ;
    45                                  ; --- 変数 ---
    46                                  ;  ██████╗████████╗ █████╗ ████████╗██╗ ██████╗
    47                                  ; ██╔════╝╚══██╔══╝██╔══██╗╚══██╔══╝██║██╔════╝
    48                                  ; ╚█████╗    ██║   ██║  ██║   ██║   ██║██║     
    49                                  ;  ╚═══██    ██║   ███████║   ██║   ██║██║     
    50                                  ; ██████╔╝   ██║   ██╔══██║   ██║   ██║╚██████╗
    51                                  ; ╚═════╝    ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝
    52                                  ; //////////////////////////////////////////////////////////////////////////// ;
    53                                  
    54                                  ; 表示関連
    55                                  sXpos:
    56 000000E9 00                              DB      0x00                    ; 表示xカーソル
    57                                  sYpos:
    58 000000EA 09                              DB      0x09                    ; 表示yカーソル
    59                                  sColorNormal:
    60 000000EB 0F                              DB      0x0f                    ; 表示色(初期値: 白)
    61                                  sColorError:
    62 000000EC 01                              DB      0x01                    ; 表示色(初期値: 赤?)
    63                                  
    64                                  ; 入出力関連
    65                                  sStdInput:                              ; 標準入力
    66 000000ED 00                              DB      FD_KEYBORD
    67                                  sStdOut:                                ; 標準出力
    68 000000EE 01                              DB      FD_DISPLAY
    69                                  sStdErrout:                             ; 標準エラー出力
    70 000000EF 01                              DB      FD_DISPLAY
    71                                  sOneLineBuf:
    72 000000F0 00<rep 100h>                    times   0x0100 DB 0x00          ; 入力バッファ(256byte)
    73                                  sOneLineSeek:
    74 000001F0 0000                            DW      0x0000                  ; シークオフセット
    75                                  
    76                                  sNowDir:
    77 000001F2 1500                            DW      DIR_ROOT                ; 現在いるディレクトリ
    78                                  
    79                                  ; //////////////////////////////////////////////////////////////////////////// ;
    80                                  ; --- 初期化プログラム ---
    81                                  ; ██╗███╗  ██╗██╗████████╗
    82                                  ; ██║████╗ ██║██║╚══██╔══╝
    83                                  ; ██║██╔██╗██║██║   ██║   
    84                                  ; ██║██║╚████║██║   ██║   
    85                                  ; ██║██║ ╚███║██║   ██║   
    86                                  ; ╚═╝╚═╝  ╚══╝╚═╝   ╚═╝   
    87                                  ; //////////////////////////////////////////////////////////////////////////// ;
    88                                  
    89                                  mashInit:
    90 000001F4 B80000                          MOV     AX, 0x0000              ; レジスタセット
    91 000001F7 8ED8                            MOV     DS, AX
    92 000001F9 8ED0                            MOV     SS, AX
    93 000001FB 8EC0                            MOV     ES, AX
    94 000001FD BCFF3F                          MOV     SP, 0x3fff              ; ｾｸﾞﾎﾟ
    95                                  
    96 00000200 E8F703                          CALL    rInitMalloc
    97                                          
    98                                  %ifdef __DEBUG
    99                                          ; AX, BX, CX, DX, SI, DI, BP, SP, DS, ES, SS
   100                                          ;MOV     AX, 0x1234
   101                                          ;MOV     BX, 0x2345
   102                                          ;MOV     CX, 0x3456
   103                                          ;MOV     DX, 0x4567
   104                                          ;MOV     SI, 0x5678
   105                                          ;MOV     DI, 0x6789
   106                                          ;MOV     BP, 0x789a
   107                                  %endif
   108                                  
   109 00000203 E85005                          CALL    dbgRegDump
   110                                  
   111                                  %ifdef __DEBUG
   112                                          ;MOV     AX, 0x0000
   113                                          ;MOV     DS, AX
   114                                          ;MOV     SS, AX
   115                                          ;MOV     ES, AX
   116                                  %endif
   117                                  
   118 00000206 E81204                          CALL    cmdVer                  ; ロゴ+版数表示
   119                                  
   120                                  %ifdef __DEBUG
   121                                          ; スクロールテスト
   122                                  ;.dbgLoop:
   123                                          ;MOV     AH, 0x00
   124                                          ;INT     0x16
   125                                  
   126                                          ;MOV     AH, 0x06
   127                                          ;MOV     AL, 0x01
   128                                          ;MOV     BH, 0x07
   129                                          ;MOV     CX, 0x0000
   130                                          ;MOV     DH, 24
   131                                          ;MOV     DL, 79
   132                                          ;INT     0x10
   133                                  
   134                                          ;JMP     .dbgLoop
   135                                  %endif
   136                                          
   137 00000209 EB00                            JMP     mashLoop                ; ループ処理へ移行
   138                                  
   139                                  ; //////////////////////////////////////////////////////////////////////////// ;
   140                                  ; --- ループプログラム ---
   141                                  ; ██╗      ██████╗  ██████╗ ██████╗ 
   142                                  ; ██║     ██╔═══██╗██╔═══██╗██╔══██╗
   143                                  ; ██║     ██║   ██║██║   ██║██████╔╝
   144                                  ; ██║     ██║   ██║██║   ██║██╔═══╝ 
   145                                  ; ███████╗╚██████╔╝╚██████╔╝██║     
   146                                  ; ╚══════╝ ╚═════╝  ╚═════╝ ╚═╝     
   147                                  ; //////////////////////////////////////////////////////////////////////////// ;
   148                                  
   149                                  mashLoop:
   150 0000020B E8C102                          CALL    libSetCursolNextLine    ; 改行
   151 0000020E E8C103                          CALL    rOneLineClear           ; バッファクリア
   152                                  .inputLoop:
   153                                          ; debug ---->
   154                                          ; in  : AX      ダンプするバイト数
   155                                          ;     : DS:DI   ダンプ開始アドレス
   156 00000211 B80000                          MOV     AX, 0x0000
   157 00000214 8ED8                            MOV     DS, AX
   158 00000216 B81000                          MOV     AX, 0x0010
   159 00000219 BF[E800]                        MOV     DI, sOneLineBuf-8
   160 0000021C E8B804                          CALL    dbgDump
   161                                  
   162                                          ;MOV     AX, 0x0000
   163                                          ;MOV     DS, AX
   164                                          ;MOV     AX, 0x0010
   165                                          ;MOV     DI, sOneLineBuf+250
   166                                          ;CALL    dbgDump
   167                                          ; <---- debug
   168                                  
   169 0000021F E84F03                          CALL    rOneLineInput           ; キーボード入力 → バッファ+出力
   170                                          ;PUSH    AX
   171                                          ;POP     AX
   172 00000222 80FC00                          CMP     AH, 0x00
   173 00000225 74EA                            JZ      .inputLoop              ; 続ける
   174                                  
   175                                  .parseBuf:
   176 00000227 B80000                          MOV     AX, 0x0000
   177 0000022A 8ED0                            MOV     SS, AX
   178 0000022C BD[F000]                        MOV     BP, sOneLineBuf
   179 0000022F E8FF02                          CALL    libPuts
   180 00000232 E89D03                          CALL    rOneLineClear
   181 00000235 EBDA                            JMP     .inputLoop
   182                                  
   183                                          ;CALL    rPutCR                  ; 改行
   184                                          ;MOV     AX, 0x0000
   185                                          ;MOV     DS, AX
   186                                          ;MOV     ES, AX
   187                                          ;MOV     SS, AX
   188                                          ;MOV     DI, [sOneLineBuf]
   189                                          ;CALL    sysPrintf               ; 表示
   190                                  
   191                                          ;CALL    sysPwd                  ; 現在のディレクトリを表示
   192                                  
   193                                          ;MOV     BP, .sAllow             ; ">"表示
   194                                          ;CALL    sysEcho
   195                                          
   196 00000237 EBD2                            JMP     mashLoop                ; 永遠にループする
   197                                  .sAllow:
   198                                  
   199                                  ; //////////////////////////////////////////////////////////////////////////// ;
   200                                  ; --- ビルトインコマンド ---
   201                                  ;  ██████╗ ██████╗ ███╗   ███╗███╗   ███╗ █████╗ ███╗  ██╗██████╗ 
   202                                  ; ██╔════╝██╔═══██╗████╗ ████║████╗ ████║██╔══██╗████╗ ██║██╔══██╗
   203                                  ; ██║     ██║   ██║██╔████╔██║██╔████╔██║██║  ██║██╔██╗██║██║  ██║
   204                                  ; ██║     ██║   ██║██║╚██╔╝██║██║╚██╔╝██║███████║██║╚████║██║  ██║
   205                                  ; ╚██████╗╚██████╔╝██║ ╚═╝ ██║██║ ╚═╝ ██║██╔══██║██║ ╚███║██████╔╝
   206                                  ;  ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚══╝╚═════╝ 
   207                                  ; //////////////////////////////////////////////////////////////////////////// ;
   208                                  
   209                                  ; dir コマンド
   210                                  ; 現在のディレクトリのフォルダ、ファイルを表示する
   211                                  sysDir:
   212 00000239 E84B04                          CALL    rPushReg                ; レジスタ退避
   213                                  
   214 0000023C B90002                          MOV     CX, 0x0200              ; 現在のディレクトリ用のメモリを取得
   215 0000023F E82400                          CALL    sysMalloc
   216 00000242 892E[5402]                      MOV WORD [.allocAddr1], BP
   217 00000246 B90002                          MOV     CX, 0x0200              ; リンク先のディレクトリ用のメモリを取得
   218 00000249 E81A00                          CALL    sysMalloc
   219 0000024C 892E[5602]                      MOV WORD [.allocAddr2], BP
   220                                  
   221 00000250 E85104                          CALL    rPopReg                 ; レジスタ取得
   222 00000253 C3                              RET
   223                                  .allocAddr1:
   224 00000254 0000                            DB      0x00, 0x00
   225                                  .allocAddr2:
   226 00000256 0000                            DB      0x00, 0x00
   227                                  
   228                                  ; pwd コマンド
   229                                  ; 現在のディレクトリを標準出力に渡す
   230                                  sysPwd:
   231 00000258 E82C04                          CALL    rPushReg                ; レジスタ退避
   232 0000025B E84604                          CALL    rPopReg                 ; レジスタ取得
   233 0000025E C3                              RET
   234                                  
   235                                  ; echo コマンド
   236                                  ; 文字列の表示(エスケープシーケンスあり)
   237                                  ; in  : BP      表示する文字列の先頭ポインタ
   238                                  ; out : 画面表示
   239                                  sysEcho:
   240 0000025F E82504                          CALL    rPushReg                ; レジスタ退避
   241 00000262 E83F04                          CALL    rPopReg                 ; レジスタ取得
   242 00000265 C3                              RET
   243                                  
   244                                  ; malloc コマンド
   245                                  ; 指定されたバイト数の確保した先頭アドレスを返却する
   246                                  ; 実際の確保は16バイト単位で行われる
   247                                  ; 一度に確保できるのは 4080(255* 16)バイト まで
   248                                  ;
   249                                  ; アロケーションメモリ: 0x1000:0x0000 ~ 0x1000:0xffff
   250                                  ; アロケーションテーブル: 0x0000:0x1000 ~ 0x0000:0x1fff
   251                                  ;
   252                                  ; in  : CX      確保したいメモリ容量(バイト)
   253                                  ; out : AX      結果 0成功 1失敗
   254                                  ;     : SS:BP   確保した先頭ポインタ(確保に成功した場合)
   255                                  sysMalloc:
   256 00000266 E81E04                          CALL    rPushReg                ; レジスタ退避
   257 00000269 1E                              PUSH    DS                      ; セグメント退避
   258                                  
   259 0000026A B80000                          MOV     AX, 0x0000              ; テーブルのセグメントは 0 、以後ルーチン脱出直前まで0のまま
   260 0000026D 8ED8                            MOV     DS, AX
   261 0000026F 81F90010                        CMP     CX, 0x1000              ; 確保メモリ上限チェック
   262 00000273 0F838300                        JAE     .retError
   263 00000277 83F900                          CMP     CX, 0x0000              ; 0バイトかチェック
   264 0000027A 747E                            JZ      .retError
   265 0000027C 83C10F                          ADD     CX, 0x000f              ; 確保するブロック数(1ブロック16バイト) = (確保したいバイト + 15) /16
   266 0000027F C1E904                          SHR     CX, 0x04
   267 00000282 880E[0C03]                      MOV BYTE [.aSize], CL
   268 00000286 C706[0903]0010                  MOV WORD [.aFAdr], 0x1000       ; テーブルの先頭ポインタは 0x1000
   269 0000028C C606[0B03]00                    MOV BYTE [.aCnt], 0x00
   270 00000291 C706[0D03]0010                  MOV WORD [.aRet], 0x1000
   271                                  .mallocLoop:
   272 00000297 8B3E[0903]                      MOV WORD DI, [.aFAdr]           ; シークしている番地が0か確認
   273 0000029B 3E8A25                          MOV BYTE AH, [DS:DI]
   274 0000029E 80FC00                          CMP     AH, 0x00
   275 000002A1 7419                            JZ      .cntChk
   276 000002A3 C606[0B03]00                    MOV BYTE [.aCnt], 0x00         ; シーク番地が0ではないので連続数をリセット
   277 000002A8 A1[0903]                        MOV WORD AX, [.aFAdr]           ; アロケーションテーブルをシーク
   278 000002AB 40                              INC     AX
   279 000002AC A3[0903]                        MOV WORD [.aFAdr], AX
   280 000002AF A3[0D03]                        MOV WORD [.aRet], AX            ; シーク以前には確保できる領域がないため次へ
   281                                  .exitChk:
   282 000002B2 A1[0903]                        MOV WORD AX, [.aFAdr]           ; テーブルの末尾まで行ったらもう見込みなし
   283 000002B5 3D0020                          CMP     AX, 0x2000              ; 末尾は 0x1fff
   284 000002B8 75DD                            JNZ     .mallocLoop             ; 末尾ではないなら次の1バイトを
   285 000002BA EB3E                            JMP     .retError
   286                                  .cntChk:
   287 000002BC 8A3E[0B03]                      MOV BYTE BH, [.aCnt]            ; 連続空きブロックカウントをカウントアップ
   288 000002C0 FEC7                            INC     BH                      ; AHには連続空きブロック
   289 000002C2 883E[0B03]                      MOV BYTE [.aCnt], BH
   290 000002C6 8A2E[0C03]                      MOV BYTE CH, [.aSize]           ; 連続空きブロックで注文した領域を充足するか？
   291 000002CA 38EF                            CMP     BH, CH                  ; ALには注文されたブロック数(AHには連続空きブロック)
   292 000002CC 7409                            JZ      .fillTbl
   293 000002CE A1[0903]                        MOV WORD AX, [.aFAdr]           ; まだ充足しないため検索を続ける(連続空きブロックは継続)
   294 000002D1 40                              INC     AX
   295 000002D2 A3[0903]                        MOV WORD [.aFAdr], AX
   296 000002D5 EBDB                            JMP     .exitChk                ; 末尾チェックへ
   297                                  .fillTbl:
   298 000002D7 A1[0903]                        MOV WORD AX, [.aFAdr]           ; 連続空きブロックの先頭アドレスを取得
   299 000002DA 89C7                            MOV     DI, AX                  ; 以後空きブロックのアドレスは DI にて参照
   300 000002DC 8A26[0B03]                      MOV BYTE AH, [.aCnt]            ; 以後注文されたブロック数は AH にて参照
   301 000002E0 B100                            MOV     CL, 0x00
   302                                  .fillLoop:
   303 000002E2 FEC1                            INC     CL                      ; aCnt++
   304 000002E4 3E880D                          MOV BYTE [DS:DI], CL            ; free用に意味のある値を格納
   305 000002E7 4F                              DEC     DI                      ; aFAdr--
   306 000002E8 38CC                            CMP     AH, CL                  ; 注文されたブロック数だけ書き込んだら終了
   307 000002EA 75F6                            JNZ     .fillLoop
   308 000002EC A1[0D03]                        MOV WORD AX, [.aRet]            ; 呼び出し元に返却するのは (連続空きブロックの先頭アドレス - 0X10000) * 16
   309 000002EF 2D0010                          SUB     AX, 0x1000
   310 000002F2 C1E004                          SHL     AX, 0x04
   311 000002F5 A3[0D03]                        MOV WORD [.aRet], AX
   312 000002F8 EB06                            JMP     .return
   313                                  .retError:
   314 000002FA C706[0D03]FFFF                  MOV WORD [.aRet], 0xffff        ; とりあえずゴミデータ
   315                                  .return:
   316 00000300 E8A103                          CALL    rPopReg                 ; レジスタ取得
   317 00000303 8B2E[0D03]                      MOV WORD BP, [.aRet]            ; 取得した先頭アドレスを格納
   318 00000307 1F                              POP     DS                      ; mallocをコールする前のセグメントに戻す
   319 00000308 C3                              RET                             ; 呼び出し元へ     
   320                                  .aFAdr:                                 ; テーブル内シークアドレス
   321 00000309 0000                            DB      0x00, 0x00
   322                                  .aCnt:                                  ; 現時点の連続空きブロック
   323 0000030B 00                              DB      0x00
   324                                  .aSize:                                 ; 検索するべき連続空きブロック
   325 0000030C 00                              DB      0x00
   326                                  .aRet:                                  ; 返却するアロケーションメモリアドレス
   327 0000030D 0000                            DB      0x00, 0x00
   328                                  
   329                                  ; free コマンド
   330                                  ; 指定されたアドレスを含む確保領域を解放する
   331                                  ; 実際の確保は16バイト単位で行われる
   332                                  ;
   333                                  ; アロケーションメモリ: 0x1000:0x0000 ~ 0x1000:0xffff
   334                                  ; アロケーションテーブル: 0x0000:0x1000 ~ 0x0000:0x1fff
   335                                  ;
   336                                  ; in  : BP      解放したいアドレス(確保した領域内ならどこでも)
   337                                  ; out : AX      結果 0成功 1失敗
   338                                  sysFree:
   339 0000030F E87503                          CALL    rPushReg                ; レジスタ退避
   340 00000312 1E                              PUSH    DS                      ; セグメント退避
   341 00000313 89EF                            MOV     DI, BP                  ; DI ← (BP / 16) + 0x1000
   342                                  
   343 00000315 B80000                          MOV     AX, 0x0000
   344 00000318 8ED8                            MOV     DS, AX
   345 0000031A C1EF04                          SHR     DI, 0x04
   346 0000031D 81C70010                        ADD     DI, 0x1000
   347                                  .freeLoop:                              ; 確保した先頭まで戻る
   348 00000321 3E8A25                          MOV BYTE AH, [DS:DI]            ; sTbl[DI]
   349 00000324 80FC00                          CMP     AH, 0x00                ; 値が 0x00 なら異常メモリを入力している
   350 00000327 740A                            JZ      .next
   351 00000329 3EC60500                        MOV BYTE [DS:DI], 0x00
   352 0000032D 47                              INC     DI
   353 0000032E 80FC01                          CMP     AH, 0x01                ; 値が 0x01 まで続ける
   354 00000331 75EE                            JNZ     .freeLoop
   355                                  .next:
   356 00000333 1F                              POP     DS                      ; セグメント戻す
   357 00000334 E86D03                          CALL    rPopReg                 ; レジスタ取得
   358 00000337 C3                              RET
   359                                  
   360                                  ; printf 等の文字列解析+文字出力(エスケープシーケンスあり)
   361                                  ; 256文字まで(終端文字含む)
   362                                  ; %c: 文字, %s: 文字列, %d: 10進数, %x: 16進数(小文字), %X: 16進数(大文字)
   363                                  ; \a: 警報音, \n: 復帰改行, \r: 復帰, \t: タブ, \o: 更新なしで次の文字へ, \\, \?, \', \": 1文字, \0: 文字列終了
   364                                  ; \Uxx: カーソルをxx(10新2桁)行上, \Dxx: 下, \Rxx: 右, \Lxx: 左
   365                                  ; \Xxx: カーソルのx座標をxx(10新2桁)に移動, \Yxx: カーソルのx座標をxx(10新2桁)に移動, 
   366                                  ; in  : AX 出力先ファイルディスクリプタ
   367                                  ;     : SI 文字列の先頭ポインタ
   368                                  ;     : DI 変数の先頭ポインタ(DI:1つ目の変数, DI+4:2つ目の変数...)
   369                                  sysPrintf:
   370 00000338 E84C03                          CALL    rPushReg                ; レジスタ退避
   371                                  
   372 0000033B E86603                          CALL    rPopReg                 ; レジスタ取得
   373 0000033E C3                              RET
   374                                  
   375                                  ; 文字列の表示
   376                                  ; 終端文字(0x00)を確認するまで文字を表示し続ける
   377                                  ; in  : BX      表示する文字列
   378                                  ;       DS:BX   データポインタ
   379                                  ; out : AX      表示結果
   380                                  ;                   0: 成功
   381                                  ;                   1: 256文字以上の文字列を表示しようとした
   382                                  ;                   2: その他の失敗
   383                                  sysPrint:
   384 0000033F E84503                          CALL    rPushReg                ; レジスタ退避
   385                                  
   386                                  
   387                                  
   388 00000342 E85F03                          CALL    rPopReg                 ; レジスタ取得
   389 00000345 C3                              RET
   390                                  
   391                                  ; 単一の文字出力
   392                                  ; カーソル位置の更新も行う
   393                                  ; in  : AL      表示する文字
   394                                  sysPutChar:
   395                                  
   396                                  ; //////////////////////////////////////////////////////////////////////////// ;
   397                                  ; --- ライブラリ ---
   398                                  ; ██╗     ██╗██████╗ ██████╗  █████╗ ██████╗ ██╗   ██╗
   399                                  ; ██║     ██║██╔══██╗██╔══██╗██╔══██╗██╔══██╗╚██╗ ██╔╝
   400                                  ; ██║     ██║██████╔╝██████╔╝██║  ██║██████╔╝ ╚████╔╝ 
   401                                  ; ██║     ██║██╔══██╗██╔══██╗███████║██╔══██╗  ╚██╔╝  
   402                                  ; ███████╗██║██████╔╝██║  ██║██╔══██║██║  ██║   ██║   
   403                                  ; ╚══════╝╚═╝╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   
   404                                  ; //////////////////////////////////////////////////////////////////////////// ;
   405                                  
   406                                  ; //////////////////////////////////////////////////////////////////////////// ;
   407                                  ; ctype.h(c89)                                                                 ;
   408                                  ;       libIsalnum      libIsAlpha      libIsblank      libIscntrl             ;
   409                                  ;       libIsdigit      libIsgraph      libIslower      libIsprint             ;
   410                                  ;       libIspuct       libIsspace      libIsupper      libIsxdigit            ;
   411                                  ;       libTolower      libToupper                                             ;
   412                                  ; //////////////////////////////////////////////////////////////////////////// ;
   413                                  
   414                                  ; 英大文字か判定
   415                                  ; isupper(c89) 相当
   416                                  ; in  : AL      asciiコード
   417                                  ; out : AH      0: 大文字以外
   418                                  ;               0以外: 大文字
   419                                  libIsupper:
   420 00000346 3C41                            CMP     AL, 0x41                ; A
   421 00000348 7208                            JB      .ng                     ; AL < 'A' ならNG
   422 0000034A 3C5A                            CMP     AL, 0x5a                ; Z
   423 0000034C 7704                            JA      .ng                     ; AL > 'Z' ならNG
   424                                  .ok:
   425 0000034E B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   426 00000350 EB04                            JMP     .exit
   427                                  .ng:
   428 00000352 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   429 00000354 EB00                            JMP     .exit
   430                                  .exit:
   431 00000356 C3                              RET
   432                                  
   433                                  ; 英小文字か判定
   434                                  ; isupper(c89) 相当
   435                                  ; in  : AL      asciiコード
   436                                  ; out : AH      0: 小文字以外
   437                                  ;               0以外: 小文字
   438                                  libIslower:
   439 00000357 3C61                            CMP     AL, 0x61                ; a
   440 00000359 7208                            JB      .ng                     ; AL < 'a' ならNG
   441 0000035B 3C7A                            CMP     AL, 0x7a                ; z
   442 0000035D 7704                            JA      .ng                     ; AL > 'z' ならNG
   443                                  .ok:
   444 0000035F B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   445 00000361 EB04                            JMP     .exit
   446                                  .ng:
   447 00000363 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   448 00000365 EB00                            JMP     .exit
   449                                  .exit:
   450 00000367 C3                              RET
   451                                  
   452                                  ; 数字か判定
   453                                  ; isdigit(c89) 相当
   454                                  ; in  : AL      asciiコード
   455                                  ; out : AH      0: 小文字以外
   456                                  ;               0以外: 小文字
   457                                  libIsdigit:
   458 00000368 3C30                            CMP     AL, 0x30                ; 0
   459 0000036A 7208                            JB      .ng                     ; AL < '0' ならNG
   460 0000036C 3C39                            CMP     AL, 0x39                ; 9
   461 0000036E 7704                            JA      .ng                     ; AL > '9' ならNG
   462                                  .ok:
   463 00000370 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   464 00000372 EB04                            JMP     .exit
   465                                  .ng:
   466 00000374 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   467 00000376 EB00                            JMP     .exit
   468                                  .exit:
   469 00000378 C3                              RET
   470                                  
   471                                  ; 空白文字を含む表示文字か判定
   472                                  ; isprint(c89) 相当
   473                                  ; in  : AL      asciiコード
   474                                  ; out : AH      0: 表示文字以外
   475                                  ;               0以外: 表示文字
   476                                  libIsprint:
   477 00000379 3C20                            CMP     AL, 0x20
   478 0000037B 7208                            JB      .ng                     ; AL < 0x20 ならNG
   479 0000037D 3C7E                            CMP     AL, 0x7e
   480 0000037F 7704                            JA      .ng                     ; AL > 0x7e ならNG
   481                                  .ok:
   482 00000381 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   483 00000383 EB04                            JMP     .exit
   484                                  .ng:
   485 00000385 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   486 00000387 EB00                            JMP     .exit
   487                                  .exit:
   488 00000389 C3                              RET
   489                                  
   490                                  ; 空白文字を除く表示文字か判定
   491                                  ; isprint(c89) 相当
   492                                  ; in  : AL      asciiコード
   493                                  ; out : AH      0: 表示文字以外
   494                                  ;               0以外: 表示文字
   495                                  libIsgraph:
   496 0000038A 3C21                            CMP     AL, 0x21
   497 0000038C 7208                            JB      .ng                     ; AL < 0x21 ならNG
   498 0000038E 3C7E                            CMP     AL, 0x7e
   499 00000390 7704                            JA      .ng                     ; AL > 0x7e ならNG
   500                                  .ok:
   501 00000392 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   502 00000394 EB04                            JMP     .exit
   503                                  .ng:
   504 00000396 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   505 00000398 EB00                            JMP     .exit
   506                                  .exit:
   507 0000039A C3                              RET
   508                                  
   509                                  ; ブランク文字か判定
   510                                  ; isblank(c89) 相当
   511                                  ; in  : AL      asciiコード
   512                                  ; out : AH      0: ブランク文字以外
   513                                  ;               0以外: ブランク文字
   514                                  libIsblank:
   515 0000039B 3C20                            CMP     AL, 0x20                ; ' 'ならOK
   516 0000039D 7406                            JZ      .ok
   517 0000039F 3C09                            CMP     AL, 0x09
   518 000003A1 7402                            JZ      .ok                     ; '\t'ならOK
   519 000003A3 EB04                            JMP     .ng
   520                                  .ok:
   521 000003A5 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   522 000003A7 EB04                            JMP     .exit
   523                                  .ng:
   524 000003A9 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   525 000003AB EB00                            JMP     .exit
   526                                  .exit:
   527 000003AD C3                              RET
   528                                  
   529                                  ; 空白類文字か判定
   530                                  ; isspace(c89) 相当
   531                                  ; in  : AL      asciiコード
   532                                  ; out : AH      0: 空白類文字以外
   533                                  ;               0以外: 空白類文字
   534                                  libIsspace:
   535 000003AE 3C09                            CMP     AL, 0x09
   536 000003B0 7416                            JZ      .ok                     ; '\t'ならOK
   537 000003B2 3C0A                            CMP     AL, 0x0a
   538 000003B4 7412                            JZ      .ok                     ; '\n'ならOK
   539 000003B6 3C0B                            CMP     AL, 0x0b
   540 000003B8 740E                            JZ      .ok                     ; '\v'ならOK
   541 000003BA 3C0C                            CMP     AL, 0x0c
   542 000003BC 740A                            JZ      .ok                     ; '\f'ならOK
   543 000003BE 3C0D                            CMP     AL, 0x0d
   544 000003C0 7406                            JZ      .ok                     ; '\r'ならOK
   545 000003C2 3C20                            CMP     AL, 0x20
   546 000003C4 7402                            JZ      .ok                     ; ' 'ならOK
   547 000003C6 EB04                            JMP     .ng
   548                                  .ok:
   549 000003C8 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   550 000003CA EB04                            JMP     .exit
   551                                  .ng:
   552 000003CC B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   553 000003CE EB00                            JMP     .exit
   554                                  .exit:
   555 000003D0 C3                              RET
   556                                  
   557                                  ; 制御文字か判定
   558                                  ; iscntrl(c89) 相当
   559                                  ; in  : AL      asciiコード
   560                                  ; out : AH      0: 制御文字以外
   561                                  ;               0以外: 制御文字
   562                                  libIscntrl:
   563 000003D1 3C7F                            CMP     AL, 0x7f
   564 000003D3 7408                            JZ      .ok                     ; '\del'ならOK
   565 000003D5 3C00                            CMP     AL, 0x00
   566 000003D7 7208                            JB      .ng                     ; AL < 0x00 ならNG
   567 000003D9 3C1F                            CMP     AL, 0x1f
   568 000003DB 7704                            JA      .ng                     ; AL > 0x1f ならNG
   569                                  .ok:
   570 000003DD B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   571 000003DF EB04                            JMP     .exit
   572                                  .ng:
   573 000003E1 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   574 000003E3 EB00                            JMP     .exit
   575                                  .exit:
   576 000003E5 C3                              RET 
   577                                  
   578                                  ; 16進数字か判定
   579                                  ; isxdigit(c89) 相当
   580                                  ; in  : AL      asciiコード
   581                                  ; out : AH      0: 16進文字以外
   582                                  ;               0以外: 16進文字
   583                                  libIsxdigit:
   584 000003E6 3C30                            CMP     AL, 0x30                ; 0
   585 000003E8 7206                            JB      .next1                  ; AL < '0' ならNG
   586 000003EA 3C39                            CMP     AL, 0x39                ; 9
   587 000003EC 7702                            JA      .next1                  ; AL > '9' ならNG
   588 000003EE EB14                            JMP     .ok
   589                                  .next1:
   590 000003F0 3C41                            CMP     AL, 0x41                ; A
   591 000003F2 7206                            JB      .next2                  ; AL < 'A' ならNG
   592 000003F4 3C46                            CMP     AL, 0x46                ; F
   593 000003F6 7702                            JA      .next2                  ; AL > 'F' ならNG
   594 000003F8 EB0A                            JMP     .ok
   595                                  .next2:
   596 000003FA 3C61                            CMP     AL, 0x61                ; a
   597 000003FC 720A                            JB      .ng                     ; AL < 'a' ならNG
   598 000003FE 3C66                            CMP     AL, 0x66                ; f
   599 00000400 7706                            JA      .ng                     ; AL > 'f' ならNG
   600 00000402 EB00                            JMP     .ok
   601                                  .ok:
   602 00000404 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   603 00000406 EB04                            JMP     .exit
   604                                  .ng:
   605 00000408 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   606 0000040A EB00                            JMP     .exit
   607                                  .exit:
   608 0000040C C3                              RET 
   609                                  
   610                                  ; 英文字か判定
   611                                  ; isalpha(c89) 相当
   612                                  ; in  : AL      asciiコード
   613                                  ; out : AH      0: 英文字以外
   614                                  ;               0以外: 英文字
   615                                  libIsalpha:
   616 0000040D E836FF                          CALL    libIsupper              ; 大文字か確認
   617 00000410 80FC00                          CMP     AH, 0x00
   618 00000413 750A                            JNZ     .ok
   619 00000415 E83FFF                          CALL    libIslower              ; 小文字か確認
   620 00000418 80FC00                          CMP     AH, 0x00
   621 0000041B 7502                            JNZ     .ok
   622 0000041D EB04                            JMP     .ng
   623                                  .ok:
   624 0000041F B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   625 00000421 EB04                            JMP     .exit
   626                                  .ng:
   627 00000423 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   628 00000425 EB00                            JMP     .exit
   629                                  .exit:
   630 00000427 C3                              RET 
   631                                  
   632                                  ; 英文字or数字か判定
   633                                  ; isalnum(c89) 相当
   634                                  ; in  : AL      asciiコード
   635                                  ; out : AH      0: 英文字でも数字でもない
   636                                  ;               0以外: 英文字or数字
   637                                  libIsalnum:
   638 00000428 E81BFF                          CALL    libIsupper              ; 大文字か確認
   639 0000042B 80FC00                          CMP     AH, 0x00
   640 0000042E 7512                            JNZ     .ok
   641 00000430 E824FF                          CALL    libIslower              ; 小文字か確認
   642 00000433 80FC00                          CMP     AH, 0x00
   643 00000436 750A                            JNZ     .ok
   644 00000438 E82DFF                          CALL    libIsdigit              ; 数字か確認
   645 0000043B 80FC00                          CMP     AH, 0x00
   646 0000043E 7502                            JNZ     .ok
   647 00000440 EB04                            JMP     .ng
   648                                  .ok:
   649 00000442 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   650 00000444 EB04                            JMP     .exit
   651                                  .ng:
   652 00000446 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   653 00000448 EB00                            JMP     .exit
   654                                  .exit:
   655 0000044A C3                              RET 
   656                                  
   657                                  ; 区切り文字か判定(区切り文字 = (!(isalnum) & isgraph)
   658                                  ; ispunct(c89) 相当
   659                                  ; in  : AL      asciiコード
   660                                  ; out : AH      0: 区切り文字以外
   661                                  ;               0以外: 区切り文字
   662                                  libIspunct:
   663 0000044B E8DAFF                          CALL    libIsalnum              ; 英文字or数字か確認
   664 0000044E 80FC00                          CMP     AH, 0x00
   665 00000451 750E                            JNZ     .ng                     ; 英文字or数字ならNG
   666 00000453 E834FF                          CALL    libIsgraph              ; 空白を除く印字可能文字か確認
   667 00000456 80FC00                          CMP     AH, 0x00
   668 00000459 7502                            JNZ     .ok                     ; 印字可能文字ならOK
   669 0000045B EB04                            JMP     .ng
   670                                  .ok:
   671 0000045D B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   672 0000045F EB04                            JMP     .exit
   673                                  .ng:
   674 00000461 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   675 00000463 EB00                            JMP     .exit
   676                                  .exit:
   677 00000465 C3                              RET
   678                                  
   679                                  ; 大文字を小文字に変換
   680                                  ; tolower(c89) 相当
   681                                  ; in  : AL      asciiコード
   682                                  ; out : AH      変換後asciiコード
   683                                  libTolower:
   684 00000466 E8DDFE                          CALL    libIsupper              ; 大文字か判定
   685 00000469 80FC00                          CMP     AH, 0x00
   686 0000046C 7402                            JZ      .exit                   ; 大文字ではないなら変換しない
   687 0000046E 0420                            ADD     AL, 0x20
   688                                  .exit:
   689 00000470 88C4                            MOV     AH, AL
   690 00000472 C3                              RET
   691                                  
   692                                  ; 小文字を大文字に変換
   693                                  ; toupper(c89) 相当
   694                                  ; in  : AL      asciiコード
   695                                  ; out : AH      変換後asciiコード
   696                                  libToupper:
   697 00000473 E8E1FE                          CALL    libIslower              ; 小文字か判定
   698 00000476 80FC00                          CMP     AH, 0x00
   699 00000479 7402                            JZ      .exit                   ; 小文字ではないなら変換しない
   700 0000047B 2C20                            SUB     AL, 0x20
   701                                  .exit:
   702 0000047D 88C4                            MOV     AH, AL
   703 0000047F C3                              RET
   704                                  
   705                                  ; //////////////////////////////////////////////////////////////////////////// ;
   706                                  ; escseq.h                                                                     ;
   707                                  ;       libSetCursol            libSlideDisp            libSetCursolNextCol    ;
   708                                  ;       libSetCursolNextLine                                                   ;
   709                                  ; //////////////////////////////////////////////////////////////////////////// ;
   710                                  
   711                                  ; カーソル表示更新
   712                                  libSetCursol:
   713 00000480 E80402                          CALL    rPushReg                ; レジスタ退避
   714                                  
   715 00000483 B402                            MOV     AH, 0x02
   716 00000485 B700                            MOV     BH, 0x00
   717 00000487 8A16[E900]                      MOV BYTE DL, [sXpos]
   718 0000048B 8A36[EA00]                      MOV BYTE DH, [sYpos]
   719 0000048F CD10                            INT     0x10
   720                                  
   721 00000491 E81002                          CALL    rPopReg                 ; レジスタ取得
   722 00000494 C3                              RET
   723                                  
   724                                  ; 画面表示を1行上に移動
   725                                  libSlideDisp:
   726 00000495 E8EF01                          CALL    rPushReg                ; レジスタ退避
   727                                  
   728 00000498 B406                            MOV     AH, 0x06
   729 0000049A B001                            MOV     AL, 0x01
   730 0000049C B707                            MOV     BH, 0x07
   731 0000049E B90000                          MOV     CX, 0x0000
   732 000004A1 B618                            MOV     DH, 24
   733 000004A3 B24F                            MOV     DL, 79
   734 000004A5 CD10                            INT     0x10
   735                                  
   736 000004A7 E8FA01                          CALL    rPopReg                 ; レジスタ取得
   737 000004AA C3                              RET
   738                                  
   739                                  ; カーソルを次の列へ
   740                                  libSetCursolNextCol:
   741 000004AB E8D901                          CALL    rPushReg                ; レジスタ退避
   742                                  
   743 000004AE 8A26[E900]                      MOV BYTE AH, [sXpos]            ; 取得
   744 000004B2 A0[EA00]                        MOV BYTE AL, [sYpos]
   745                                  
   746 000004B5 80FC4F                          CMP     AH, DISP_COLSIZE
   747 000004B8 740E                            JZ      .newLine
   748                                  
   749 000004BA FEC4                            INC     AH
   750 000004BC 8826[E900]                      MOV BYTE [sXpos], AH            ; 設定
   751 000004C0 A2[EA00]                        MOV BYTE [sYpos], AL
   752 000004C3 E89600                          CALL    rSetCursol              ; カーソル表示更新
   753 000004C6 EB03                            JMP     .next
   754                                  .newLine:
   755 000004C8 E80400                          CALL    libSetCursolNextLine
   756                                  .next:
   757 000004CB E8D601                          CALL    rPopReg                 ; レジスタ取得
   758 000004CE C3                              RET
   759                                  
   760                                  ; カーソルを次の行へ
   761                                  libSetCursolNextLine:
   762 000004CF E8B501                          CALL    rPushReg                ; レジスタ退避
   763                                  
   764 000004D2 8A26[E900]                      MOV BYTE AH, [sXpos]            ; 取得
   765 000004D6 A0[EA00]                        MOV BYTE AL, [sYpos]
   766                                  
   767 000004D9 3C18                            CMP     AL, DISP_LINESIZE
   768 000004DB 7507                            JNZ     .nextLine               ; 一番下じゃないなら普通の改行
   769 000004DD 80FC4F                          CMP     AH, DISP_COLSIZE
   770 000004E0 750F                            JNZ     .slideLine              ; 一番右じゃないならスクロール(79列目に出力するとBIOS側でスクロールする)
   771 000004E2 EB10                            JMP     .nonSlide
   772                                  .nextLine:
   773 000004E4 B400                            MOV     AH, 0x00
   774 000004E6 FEC0                            INC     AL
   775                                  
   776 000004E8 8826[E900]                      MOV BYTE [sXpos], AH            ; 設定
   777 000004EC A2[EA00]                        MOV BYTE [sYpos], AL
   778 000004EF EB0D                            JMP     .setCursol
   779                                  .slideLine:
   780 000004F1 E8A1FF                          CALL    libSlideDisp
   781                                  .nonSlide:
   782 000004F4 C606[E900]00                    MOV BYTE [sXpos], 0x00          ; 設定
   783 000004F9 C606[EA00]18                    MOV BYTE [sYpos], DISP_LINESIZE
   784                                  .setCursol:                             ; カーソル位置更新
   785 000004FE E85B00                          CALL    rSetCursol
   786                                  
   787 00000501 E8A001                          CALL    rPopReg                 ; レジスタ取得
   788 00000504 C3                              RET
   789                                  
   790                                  ; //////////////////////////////////////////////////////////////////////////// ;
   791                                  ; stdio.h                                                                      ;
   792                                  ;       libPutchar      libPuts         libsParse       libsPrintf             ;
   793                                  ; //////////////////////////////////////////////////////////////////////////// ;
   794                                  
   795                                  ; 1文字出力
   796                                  ; static変数の座標を参照する
   797                                  ; putchar(c89) 相当
   798                                  ; in  : AL      asciiコード
   799                                  ; out : (なし)
   800                                  libPutchar:
   801 00000505 E87F01                          CALL    rPushReg                ; レジスタ退避
   802 00000508 06                              PUSH    ES
   803                                  
   804 00000509 A2[3005]                        MOV BYTE [.aChar], AL
   805                                  
   806 0000050C B80000                          MOV     AX, 0x0000
   807 0000050F 8EC0                            MOV     ES, AX
   808 00000511 B413                            MOV     AH, 0x13
   809 00000513 B000                            MOV     AL, 0x00
   810 00000515 B700                            MOV     BH, 0x00
   811 00000517 8A1E[EB00]                      MOV BYTE BL, [sColorNormal]
   812 0000051B B90100                          MOV     CX, 0x0001
   813 0000051E 8A16[E900]                      MOV BYTE DL, [sXpos]
   814 00000522 8A36[EA00]                      MOV BYTE DH, [sYpos]
   815 00000526 BD[3005]                        MOV     BP, .aChar
   816 00000529 CD10                            INT     0x10
   817                                  
   818 0000052B 07                              POP     ES
   819 0000052C E87501                          CALL    rPopReg                 ; レジスタ取得
   820 0000052F C3                              RET
   821                                  .aChar:                                 ; 表示文字
   822 00000530 00                              DB      0x00
   823                                  
   824                                  ; 文字列出力(エスケープシーケンスなし)
   825                                  ; \0 (0x00) を確認し次第改行して終了
   826                                  ; puts(c89) 相当
   827                                  ; in  : SS:BP   表示する文字列ポインタ
   828                                  ; out : なし
   829                                  libPuts:
   830 00000531 E85301                          CALL    rPushReg                ; レジスタ退避
   831                                  
   832                                          ;MOV     AX, 0x0000
   833                                          ;MOV     SS, AX
   834                                  .chk:
   835                                          ; 1文字取得 ---->
   836 00000534 368A4600                        MOV BYTE AL, [SS:BP]
   837 00000538 3C0D                            CMP     AL, 0x0d
   838 0000053A 740B                            JZ      .nextLine
   839 0000053C EB00                            JMP     .put
   840                                          ; <---- 1文字取得
   841                                  
   842                                  .put:
   843 0000053E E8C4FF                          CALL    libPutchar
   844 00000541 E867FF                          CALL    libSetCursolNextCol
   845                                  
   846 00000544 45                              INC     BP
   847 00000545 EBED                            JMP     .chk
   848                                  
   849                                          ; 改行
   850                                  .nextLine:
   851 00000547 E861FF                          CALL    libSetCursolNextCol
   852                                  
   853 0000054A E85701                          CALL    rPopReg                 ; レジスタ取得
   854 0000054D C3                              RET
   855                                  
   856                                  libsParse:
   857 0000054E E83601                          CALL    rPushReg                ; レジスタ退避
   858                                          
   859 00000551 E85001                          CALL    rPopReg                 ; レジスタ取得
   860 00000554 C3                              RET
   861                                  
   862                                  libsPrintf:
   863 00000555 E82F01                          CALL    rPushReg                ; レジスタ退避
   864                                          
   865 00000558 E84901                          CALL    rPopReg                 ; レジスタ取得
   866 0000055B C3                              RET
   867                                  
   868                                  ; //////////////////////////////////////////////////////////////////////////// ;
   869                                  ; --- サブルーチン ---
   870                                  ;  ██████╗██╗   ██╗██████╗      ██████╗  ██████╗ ██╗   ██╗████████╗██╗███╗  ██╗███████╗
   871                                  ; ██╔════╝██║   ██║██╔══██╗     ██╔══██╗██╔═══██╗██║   ██║╚══██╔══╝██║████╗ ██║██╔════╝
   872                                  ; ╚█████╗ ██║   ██║██████╔╝     ██████╔╝██║   ██║██║   ██║   ██║   ██║██╔██╗██║███████╗
   873                                  ;  ╚═══██╗██║   ██║██╔══██╗     ██╔══██╗██║   ██║██║   ██║   ██║   ██║██║╚████║██╔════╝
   874                                  ; ██████╔╝╚██████╔╝██████╔╝     ██║  ██║╚██████╔╝╚██████╔╝   ██║   ██║██║ ╚███║███████╗
   875                                  ; ╚═════╝  ╚═════╝ ╚═════╝      ╚═╝  ╚═╝ ╚═════╝  ╚═════╝    ╚═╝   ╚═╝╚═╝  ╚══╝╚══════╝
   876                                  ; //////////////////////////////////////////////////////////////////////////// ;
   877                                  
   878                                  ; カーソル表示更新
   879                                  ; in  : (なし)
   880                                  ; out : (なし)
   881                                  rSetCursol:
   882 0000055C E82801                          CALL    rPushReg                ; レジスタ退避
   883                                  
   884 0000055F B402                            MOV     AH, 0x02
   885 00000561 B700                            MOV     BH, 0x00
   886 00000563 8A16[E900]                      MOV BYTE DL, [sXpos]
   887 00000567 8A36[EA00]                      MOV BYTE DH, [sYpos]
   888 0000056B CD10                            INT     0x10
   889                                  
   890 0000056D E83401                          CALL    rPopReg                 ; レジスタ取得
   891 00000570 C3                              RET
   892                                  
   893                                  ; シェル入力をディスプレイとバッファに格納する
   894                                  ; in  : (なし)
   895                                  ; out : AH      0: 続ける
   896                                  ;               1: 終了(enterキー)
   897                                  ;               2: バッファオーバーフロー
   898                                  rOneLineInput:
   899 00000571 E81301                          CALL    rPushReg                ; レジスタ退避
   900 00000574 C606[D005]00                    MOV BYTE [.aChar], 0x00         ; 戻り値設定
   901                                  
   902                                          ; 入力から1文字取得 ---->
   903 00000579 B400                            MOV     AH, 0x00                ; 1文字取得
   904 0000057B CD16                            INT     0x16
   905                                          ; <---- 入力から1文字取得
   906                                  
   907                                          ; 印字可能文字の判定 ---->
   908 0000057D 3C0D                            CMP     AL, 0x0d                ; enterで終了
   909 0000057F 7410                            JZ      .caseEnter
   910 00000581 E8F5FD                          CALL    libIsprint              ; 印字可能文字か判定
   911 00000584 80FC00                          CMP     AH, 0x00
   912 00000587 7412                            JZ      .caseNotEnter
   913                                          ; <---- 印字可能文字の判定
   914                                  
   915                                          ; 画面への反映 ---->
   916 00000589 A2[D005]                        MOV BYTE [.aChar], AL
   917 0000058C E876FF                          CALL    libPutchar              ; 1文字出力
   918 0000058F EB0A                            JMP     .caseNotEnter
   919                                          ; <---- 画面への反映
   920                                  
   921                                          ; カーソル位置更新 ---->
   922                                  .caseEnter:                             ; enterを入力した場合
   923 00000591 E83BFF                          CALL    libSetCursolNextLine    ; 改行用のカーソル移動
   924 00000594 C606[D105]01                    MOV BYTE [.aRet], 0x01         ; 戻り値設定
   925 00000599 EB2D                            JMP     .exitLoutine            ; 格納せず終了
   926                                  .caseNotEnter:                          ; enter以外を入力した場合
   927 0000059B E80DFF                          CALL    libSetCursolNextCol     ; 通常用のカーソル移動
   928 0000059E C606[D105]00                    MOV BYTE [.aRet], 0x00         ; 戻り値設定
   929 000005A3 EB00                            JMP     .setBuf                 ; バッファに格納
   930                                          ; <---- カーソル位置更新
   931                                  .setBuf:                                ; バッファに文字を格納する
   932                                          ; debug ---->
   933                                          ;JMP     .exitLoutine
   934                                          ; <---- debug
   935                                  
   936                                          ; セグメント設定 ---->
   937 000005A5 16                              PUSH    SS
   938 000005A6 B80000                          MOV     AX, 0x0000              ; debug
   939 000005A9 8ED0                            MOV     SS, AX
   940                                          ; <---- セグメント設定
   941                                  
   942                                          ; バッファに格納 ---->
   943 000005AB B8[F000]                        MOV     AX, sOneLineBuf
   944 000005AE 0306[F001]                      ADD WORD AX, [sOneLineSeek]     ; 配列のオフセット
   945 000005B2 89C5                            MOV     BP, AX
   946 000005B4 8A26[D005]                      MOV BYTE AH, [.aChar]
   947 000005B8 36886600                        MOV BYTE [SS:BP], AH            ; 格納
   948                                          ; <---- バッファに格納
   949                                  
   950                                          ; オフセットシーク ---->
   951 000005BC 8B0E[F001]                      MOV WORD CX, [sOneLineSeek]
   952 000005C0 41                              INC     CX
   953 000005C1 890E[F001]                      MOV WORD [sOneLineSeek], CX
   954                                          ; <---- オフセットシーク
   955                                  
   956                                          ; セグメント戻す ---->
   957 000005C5 17                              POP     SS
   958                                          ; <---- セグメント戻す
   959                                          
   960 000005C6 EB00                            JMP     .exitLoutine
   961                                  .exitLoutine:
   962 000005C8 E8D900                          CALL    rPopReg                 ; レジスタ取得
   963 000005CB 8A26[D105]                      MOV BYTE AH, [.aRet]
   964 000005CF C3                              RET
   965                                  .aChar:                                 ; 取得文字
   966 000005D0 00                              DB      0x00
   967                                  .aRet:                                  ; 戻り値
   968 000005D1 00                              DB      0x00
   969                                  
   970                                  ; 入力バッファをクリアする
   971                                  ; in  : (なし)
   972                                  ; out : (なし)
   973                                  rOneLineClear:
   974 000005D2 E8B200                          CALL    rPushReg                ; レジスタ退避
   975                                  
   976 000005D5 B80000                          MOV     AX, 0x0000
   977 000005D8 8ED8                            MOV     DS, AX
   978 000005DA 8EC0                            MOV     ES, AX
   979 000005DC 8ED0                            MOV     SS, AX
   980 000005DE BF[F000]                        MOV WORD DI, sOneLineBuf
   981 000005E1 B90000                          MOV     CX, 0x0000
   982                                  .clearLoop:                             ; 0埋め
   983 000005E4 3EC60500                        MOV BYTE [DS:DI], 0x00
   984 000005E8 41                              INC     CX
   985 000005E9 47                              INC     DI
   986 000005EA 81F90001                        CMP     CX, 0x0100
   987 000005EE 75F4                            JNZ     .clearLoop
   988                                  
   989 000005F0 C706[F001]0000                  MOV WORD [sOneLineSeek], 0x0000 ; バッファシークリセット
   990                                          ;MOV WORD DI, [sOneLineBuf]
   991                                  
   992 000005F6 E8AB00                          CALL    rPopReg                 ; レジスタ取得
   993 000005F9 C3                              RET
   994                                  
   995                                  ; malloc 用のアロケーションメモリとアロケーションテーブルを初期化
   996                                  ; アロケーションメモリ 0x10000 ~ 0x1ffff
   997                                  ; アロケーションテーブル 0x01000 ~ 0x01fff
   998                                  ; in  : なし
   999                                  ; out : なし
  1000                                  rInitMalloc:
  1001 000005FA E88A00                          CALL    rPushReg                ; レジスタ退避
  1002                                  
  1003 000005FD 8CC0                            MOV     AX, ES
  1004 000005FF 50                              PUSH    AX
  1005 00000600 B80000                          MOV     AX, 0x0000
  1006 00000603 8EC0                            MOV     ES, AX
  1007 00000605 BD0010                          MOV     BP, 0x1000
  1008                                  .initLoop:
  1009 00000608 26C6460000                      MOV BYTE [ES:BP], 0x00
  1010 0000060D 45                              INC     BP
  1011 0000060E 81FD0020                        CMP     BP, 0x2000
  1012 00000612 75F4                            JNZ     .initLoop
  1013                                  
  1014 00000614 58                              POP     AX
  1015 00000615 8EC0                            MOV     ES, AX
  1016                                  %ifdef __DEBUG
  1017                                          ;MOV     CX, 0x0012              ; 動的確保テスト
  1018                                          ;CALL    sysMalloc
  1019                                          ;MOV     CX, 0x0034
  1020                                          ;CALL    sysMalloc
  1021                                          ;PUSH    BP
  1022                                          ;MOV     CX, 0x0056
  1023                                          ;CALL    sysMalloc
  1024                                          ;POP     BP
  1025                                          ;CALL    sysFree
  1026                                          ;MOV     AX, 0x1010
  1027                                          ;MOV     BP, AX
  1028                                          ;CALL    sysFree
  1029                                          
  1030                                          ;PUSH    DS                      ; アロケーションテーブル
  1031                                          ;MOV     AX, 0x0000
  1032                                          ;MOV     DS, AX
  1033                                          ;MOV     AX, 0x0200
  1034                                          ;MOV     DI, 0x1000
  1035                                          ;CALL    dbgDump
  1036                                          ;POP     DS
  1037                                  %endif
  1038 00000617 E88A00                          CALL    rPopReg                 ; レジスタ取得
  1039 0000061A C3                              RET
  1040                                  
  1041                                  ; mashのバージョン表示
  1042                                  ; ロゴとバージョンについて記載する
  1043                                  ; in  : なし
  1044                                  ; out : なし
  1045                                  cmdVer:
  1046 0000061B E86900                          CALL    rPushReg                ; レジスタ退避
  1047 0000061E B80000                          MOV     AX, 0x0000
  1048 00000621 8ED0                            MOV     SS, AX
  1049 00000623 BD[0300]                        MOV     BP, cMashLogo           ; ロゴの表示
  1050 00000626 B90000                          MOV     CX, 0x0000
  1051                                  .loophead:
  1052 00000629 51                              PUSH    CX                      ; ループ変数格納
  1053 0000062A B413                            MOV     AH, 0x13
  1054 0000062C B001                            MOV     AL, 0x01
  1055 0000062E B700                            MOV     BH, 0
  1056 00000630 3E8A1E[EB00]                    MOV     BL, [DS:sColorNormal]
  1057 00000635 B92300                          MOV     CX, 35                  ; 1行35文字
  1058 00000638 3E8A36[EA00]                    MOV     DH, [DS:sYpos]
  1059 0000063D 3E8A16[E900]                    MOV     DL, [DS:sXpos]
  1060 00000642 CD10                            INT     0x10
  1061                                  
  1062 00000644 83C523                          ADD     BP, 35                  ; 1行35文字
  1063 00000647 59                              POP     CX                      ; ループ変数取得
  1064 00000648 3EC606[E900]00                  MOV BYTE [DS:sXpos], 0x00
  1065 0000064E 3EFE06[EA00]                    INC BYTE [DS:sYpos]
  1066 00000653 41                              INC     CX
  1067 00000654 83F906                          CMP     CX, 0x0006
  1068 00000657 75D0                            JNZ     .loophead    
  1069                                  .next:
  1070 00000659 BD[D700]                        MOV     BP, cVersionStr
  1071 0000065C B413                            MOV     AH, 0x13                ; 版数の表示
  1072 0000065E B001                            MOV     AL, 0x01
  1073 00000660 B700                            MOV     BH, 0
  1074 00000662 3E8A1E[EB00]                    MOV     BL, [DS:sColorNormal]
  1075 00000667 3E8B0E[D500]                    MOV     CX, [DS:cVersionLen]
  1076 0000066C 3E8A36[EA00]                    MOV     DH, [DS:sYpos]
  1077 00000671 3E8A16[E900]                    MOV     DL, [DS:sXpos]
  1078 00000676 CD10                            INT     0x10
  1079 00000678 3EC606[E900]00                  MOV BYTE [DS:sXpos], 0x00
  1080 0000067E 3EFE06[EA00]                    INC BYTE [DS:sYpos]
  1081 00000683 E81E00                          CALL    rPopReg                 ; レジスタ取得
  1082 00000686 C3                              RET
  1083                                          
  1084                                  ; 全レジスタの退避
  1085                                  ; 呼んだあと必ず rPopReg を呼ぶこと
  1086                                  ; 呼ぶ前 SP <- サブルーチンへのポインタ
  1087                                  ; 呼び後 SP <- BP <- DI <- SI <- DX <- CX <- BX <- AX
  1088                                  ; in  : reg     レジスタ
  1089                                  ; out : なし
  1090                                                                          ; tempAX    retAddr AX  stack
  1091                                  rPushReg:                               ; ??        ??      AX  ret
  1092 00000687 A3[A006]                        MOV     [.tempAX], AX           ; AX        ??      AX  ret
  1093 0000068A 58                              POP     AX                      ; AX        ??      ret (空)
  1094 0000068B A3[A206]                        MOV WORD    [.retAddr], AX      ; AX        ret     ret (空)
  1095 0000068E A1[A006]                        MOV     AX, [.tempAX]           ; AX        ret     AX  (空)
  1096                                  
  1097 00000691 50                              PUSH    AX                      ; AX        ret     AX  AX
  1098 00000692 53                              PUSH    BX                      ; AX        ret     AX  BX)AX
  1099 00000693 51                              PUSH    CX                      ; AX        ret     AX  CX)BX)AX
  1100 00000694 52                              PUSH    DX                      ; AX        ret     AX  DX)CX)BX)AX
  1101 00000695 56                              PUSH    SI                      ; AX        ret     AX  SI)DX)CX)BX)AX
  1102 00000696 57                              PUSH    DI                      ; AX        ret     AX  DI)SI)DX)CX)BX)AX
  1103 00000697 55                              PUSH    BP                      ; AX        ret     AX  BP)DI)SI)DX)CX)BX)AX
  1104                                  
  1105 00000698 A1[A206]                        MOV WORD    AX, [.retAddr]      ; AX        ret     AX  BP)DI)SI)DX)CX)BX)AX
  1106 0000069B 50                              PUSH    AX                      ; AX        ret     ret ret)BP)DI)SI)DX)CX)BX)AX
  1107 0000069C A1[A006]                        MOV     AX, [.tempAX]           ; AX        ret     AX  ret)BP)DI)SI)DX)CX)BX)AX
  1108 0000069F C3                              RET                             ; AX        ret     ret BP)DI)SI)DX)CX)BX)AX
  1109                                  .tempAX:                                ; AXレジスタを一時的に格納
  1110 000006A0 0000                            DB      0x00, 0x00
  1111                                  .retAddr:                               ; ルーチンのリターンアドレス
  1112 000006A2 0000                            DB      0x00, 0x00
  1113                                  
  1114                                  ; レジスタの復帰
  1115                                  ; 呼ぶ前に必ず rPushReg を呼ぶこと
  1116                                  ; 呼ぶ前 SP <- サブルーチンへのポインタ <- BP <- DI <- SI <- DX <- CX <- BX <- AX
  1117                                  ; 呼び後 SP
  1118                                  ; in  : なし
  1119                                  ; out : reg     レジスタ
  1120                                                                          ; tempAX    retAddr AX  stack
  1121                                  rPopReg:                                ; ??        ??      AX  ret)BP)DI)SI)DX)CX)BX)AX
  1122 000006A4 58                              POP     AX                      ; ??        ??      ret BP)DI)SI)DX)CX)BX)AX
  1123 000006A5 A3[BC06]                        MOV WORD    [.retAddr], AX      ; ??        ret     ret BP)DI)SI)DX)CX)BX)AX
  1124                                  
  1125 000006A8 5D                              POP     BP                      ; ??        ret     ret DI)SI)DX)CX)BX)AX
  1126 000006A9 5F                              POP     DI                      ; ??        ret     ret SI)DX)CX)BX)AX
  1127 000006AA 5E                              POP     SI                      ; ??        ret     ret DX)CX)BX)AX
  1128 000006AB 5A                              POP     DX                      ; ??        ret     ret CX)BX)AX
  1129 000006AC 59                              POP     CX                      ; ??        ret     ret BX)AX
  1130 000006AD 5B                              POP     BX                      ; ??        ret     ret AX
  1131 000006AE 58                              POP     AX                      ; ??        ret     AX  (なし)
  1132                                  
  1133 000006AF A3[BA06]                        MOV     [.tempAX], AX           ; AX        ret     AX  (なし)
  1134 000006B2 A1[BC06]                        MOV WORD    AX, [.retAddr]      ; AX        ret     ret (なし)
  1135 000006B5 50                              PUSH    AX                      ; AX        ret     ret ret
  1136 000006B6 A1[BA06]                        MOV     AX, [.tempAX]           ; AX        ret     AX  ret
  1137 000006B9 C3                              RET                             ; AX        ret     AX
  1138                                  .tempAX:                                ; AXレジスタを一時的に格納
  1139 000006BA 0000                            DB      0x00, 0x00
  1140                                  .retAddr:                               ; ルーチンのリターンアドレス
  1141 000006BC 0000                            DB      0x00, 0x00
  1142                                  
  1143                                  ; ビープ音出力
  1144                                  ; in : なし
  1145                                  ; out: ビープ音
  1146                                  putBeep:
  1147 000006BE B40E                            MOV     AH, 0x0e
  1148 000006C0 B041                            MOV     AL, 0x41
  1149 000006C2 B700                            MOV     BH, 0x00
  1150 000006C4 B301                            MOV     BL, 0x01
  1151 000006C6 CD10                            INT     0x10
  1152 000006C8 C3                              RET
  1153                                  
  1154                                  ; シリアル1文字出力
  1155                                  ; in  : AL      ascii
  1156                                  ; out : (なし)
  1157                                  dbgSingle:
  1158 000006C9 E8BBFF                          CALL    rPushReg                ; レジスタ退避
  1159                                  
  1160 000006CC B401                            MOV     AH, 0x01                ; 書き込み(ALreg)
  1161 000006CE BA0000                          MOV     DX, 0x0000
  1162 000006D1 CD14                            INT     0x14
  1163                                  
  1164 000006D3 E8CEFF                          CALL    rPopReg                 ; レジスタ取得
  1165 000006D6 C3                              RET
  1166                                  
  1167                                  ; デバッグ用ダンプ
  1168                                  ; COM1を使って指定番地から指定バイトをダンプする
  1169                                  ; in  : AX      ダンプするバイト数
  1170                                  ;     : DS:DI   ダンプ開始アドレス
  1171                                  ; out : なし
  1172                                  dbgDump:
  1173 000006D7 E8ADFF                          CALL    rPushReg                ; レジスタ退避
  1174                                  
  1175 000006DA 8CDB                            MOV     BX, DS
  1176 000006DC 891E[5007]                      MOV WORD [.focusSeg], BX
  1177 000006E0 893E[5207]                      MOV WORD [.focusAddr], DI
  1178 000006E4 A3[5407]                        MOV WORD [.byteCnt], AX
  1179                                  
  1180 000006E7 B400                            MOV     AH, 0x00                ; シリアルポート設定
  1181 000006E9 B0E3                            MOV     AL, 0xe3                ; 0bBBBPPSCC, 9600bps, None, 1bit, 8bit
  1182 000006EB BA0000                          MOV     DX, 0x0000              ; 0ch = COM1, xch = COMx+1
  1183 000006EE CD14                            INT     0x14
  1184                                  
  1185 000006F0 B00A                            MOV     AL, 0x0a                ; 改行文字
  1186 000006F2 E84F00                          CALL    .putchar
  1187                                  
  1188 000006F5 B90000                          MOV     CX, 0x0000
  1189                                  .dumpLoop:
  1190 000006F8 51                              PUSH    CX
  1191 000006F9 8B1E[5007]                      MOV     BX, [.focusSeg]         ; asciiプリント
  1192 000006FD 8EDB                            MOV     DS, BX
  1193 000006FF 8B3E[5207]                      MOV     DI, [.focusAddr]
  1194 00000703 3E8A05                          MOV     AL, [DS:DI]
  1195                                  
  1196 00000706 50                              PUSH    AX
  1197 00000707 C0E804                          SHR     AL, 0x04                ; 上4bitプリント
  1198 0000070A 240F                            AND     AL, 0x0f
  1199 0000070C 3C0A                            CMP     AL, 0x0a
  1200 0000070E 7304                            JAE     .upperaf
  1201 00000710 0430                            ADD     AL, 0x30                ; 0~9
  1202 00000712 EB02                            JMP     .upperNext
  1203                                  .upperaf:
  1204 00000714 0437                            ADD     AL, 0x37                ; a~f
  1205                                  .upperNext:
  1206 00000716 E82B00                          CALL    .putchar
  1207                                  
  1208 00000719 58                              POP     AX
  1209 0000071A 240F                            AND     AL, 0x0f                ; 下4bitプリント
  1210 0000071C 3C0A                            CMP     AL, 0x0a
  1211 0000071E 7304                            JAE     .loweraf
  1212 00000720 0430                            ADD     AL, 0x30                ; 0~9
  1213 00000722 EB02                            JMP     .lowerNext
  1214                                  .loweraf:
  1215 00000724 0437                            ADD     AL, 0x37                ; a~f
  1216                                  .lowerNext:
  1217 00000726 E81B00                          CALL    .putchar
  1218                                  
  1219 00000729 B020                            MOV     AL, 0x20                ; 空白文字
  1220 0000072B E81600                          CALL    .putchar
  1221                                  
  1222 0000072E 47                              INC     DI
  1223 0000072F 893E[5207]                      MOV WORD [.focusAddr], DI
  1224 00000733 59                              POP     CX
  1225 00000734 41                              INC     CX
  1226 00000735 3B0E[5407]                      CMP WORD CX, [.byteCnt]
  1227 00000739 75BD                            JNZ     .dumpLoop
  1228                                  
  1229 0000073B B00A                            MOV     AL, 0x0a                ; 改行文字
  1230 0000073D E80400                          CALL    .putchar
  1231                                  
  1232 00000740 E861FF                          CALL    rPopReg                 ; レジスタ取得
  1233 00000743 C3                              RET
  1234                                  .putchar:                               ; 1文字出力(ALreg)
  1235 00000744 50                              PUSH    AX
  1236 00000745 52                              PUSH    DX
  1237 00000746 B401                            MOV     AH, 0x01                ; 書き込み
  1238 00000748 BA0000                          MOV     DX, 0x0000
  1239 0000074B CD14                            INT     0x14
  1240 0000074D 5A                              POP     DX
  1241 0000074E 58                              POP     AX
  1242 0000074F C3                              RET
  1243                                  .focusSeg:                              ; ダンプするセグメント
  1244 00000750 0000                            DB      0x00, 0x00
  1245                                  .focusAddr:                             ; ダンプするアドレス
  1246 00000752 0000                            DB      0x00, 0x00
  1247                                  .byteCnt:                               ; ダンプするバイト数
  1248 00000754 0000                            DB      0x00, 0x00
  1249                                  
  1250                                  ; レジスタダンプ
  1251                                  ; 内部で sysMalloc sysFree dbgDump を使用
  1252                                  ; in  : AX, BX, CX, DX, SI, DI, BP, SP, DS, ES, SS
  1253                                  dbgRegDump:
  1254 00000756 E82EFF                          CALL    rPushReg                ; レジスタ退避
  1255 00000759 1E                              PUSH    DS
  1256                                  
  1257 0000075A 16                              PUSH    SS
  1258 0000075B 06                              PUSH    ES
  1259 0000075C 1E                              PUSH    DS
  1260 0000075D 54                              PUSH    SP
  1261 0000075E 55                              PUSH    BP
  1262 0000075F 57                              PUSH    DI
  1263 00000760 56                              PUSH    SI
  1264 00000761 52                              PUSH    DX
  1265 00000762 51                              PUSH    CX
  1266 00000763 53                              PUSH    BX
  1267 00000764 50                              PUSH    AX
  1268                                  
  1269 00000765 B91600                          MOV     CX, 22                  ; メモリ確保
  1270 00000768 E8FBFA                          CALL    sysMalloc
  1271 0000076B 892E[A107]                      MOV WORD [.allocAddr], BP
  1272                                  
  1273 0000076F B80000                          MOV     AX, 0x0000
  1274 00000772 8ED8                            MOV     DS, AX
  1275 00000774 B90000                          MOV     CX, 0x0000
  1276                                  .popLoop:                               ; 2wordずつ格納
  1277 00000777 58                              POP     AX
  1278 00000778 30C4                            XOR     AH, AL                  ; リトルエンディアン → ビッグエンディアン
  1279 0000077A 30E0                            XOR     AL, AH
  1280 0000077C 30C4                            XOR     AH, AL
  1281 0000077E 3E894600                        MOV WORD [DS:BP], AX
  1282 00000782 83C502                          ADD     BP, 0x0002
  1283 00000785 41                              INC     CX
  1284 00000786 83F90B                          CMP     CX, 11
  1285 00000789 75EC                            JNZ     .popLoop
  1286                                  
  1287 0000078B B81600                          MOV     AX, 22                  ; dbgDump で 表示
  1288 0000078E 8B3E[A107]                      MOV     DI, [.allocAddr]
  1289 00000792 E842FF                          CALL    dbgDump
  1290                                  
  1291 00000795 8B2E[A107]                      MOV WORD BP, [.allocAddr]       ; メモリ解放
  1292 00000799 E873FB                          CALL    sysFree
  1293                                  
  1294 0000079C 1F                              POP     DS
  1295 0000079D E804FF                          CALL    rPopReg                 ; レジスタ取得
  1296 000007A0 C3                              RET
  1297                                  .allocAddr:
  1298 000007A1 0000                            DB      0x00, 0x00
  1299                                  
  1300                                  mashHlt:
  1301 000007A3 EBFE                            JMP     mashHlt
  1302                                  
  1303                                  ; --- 0埋め ---
  1304                                  secEnd:
  1305 000007A5 00<rep 385Bh>                   times 0x4000-($-$$) DB 0        ; mash常駐は16セクタ
