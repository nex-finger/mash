     1                                  ; mash
     2                                  ; TAB=4
     3                                  
     4                                  ; ロゴ
     5                                  ; https://jp.mathworks.com/matlabcentral/fileexchange/181715-makebanner-big-ascii-style-comment-generator
     6                                  
     7                                  ; --- ファイルインクルード ---
     8                                  %include        "../asm/define.asm"
     1                              <1> ; --- 画面関連 ---
     2                              <1> %define     DISP_COLSIZE    79
     3                              <1> %define     DISP_LINESIZE   24
     4                              <1> 
     5                              <1> ; --- ディレクトリ構造 ---
     6                              <1> ; root
     7                              <1> %define     DIR_ROOT        0x0015
     8                              <1> 
     9                              <1> ; root一覧
    10                              <1> %define     DIR_BIN         0x0016
    11                              <1> %define     DIR_USR         0x0017
    12                              <1> %define     DIR_README      0x0018
    13                              <1> 
    14                              <1> ; bin一覧
    15                              <1> %define     DIR_TEST        0x0019
    16                              <1> 
    17                              <1> ; --- ディレクトセクタ ---
    18                              <1> ; アトリビュート
    19                              <1> %define     ATR_EMPTY       0x00
    20                              <1> %define     ATR_DIR         0x01
    21                              <1> %define     ATR_FILE        0x02
    22                              <1> 
    23                              <1> ; --- 入出力 ---
    24                              <1> ; ファイルディスクリプタ
    25                              <1> %define     FD_KEYBORD      0x00
    26                              <1> %define     FD_DISPLAY      0x01
    27                              <1> %define     FD_SERIAL       0x02
    28                              <1> %define     FD_FILE0        0x03
    29                              <1> %define     FD_FILE1        0x04
    30                              <1> %define     FD_FILE2        0x05
    31                              <1> %define     FD_FILE3        0x06
    32                              <1> 
    33                              <1> ; --- マクロ ---
    34                              <1> ; シリアル初期化
    35                              <1> %macro MACRO_SERIAL_INIT 0
    36                              <1>         MOV     AH, 0x00                ; シリアルポート設定
    37                              <1>         MOV     AL, 0xe3                ; 0bBBBPPSCC, 9600bps, None, 1bit, 8bit
    38                              <1>         MOV     DX, 0x0000              ; 0ch = COM1, xch = COMx+1
    39                              <1>         INT     0x14
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> ; シリアル1文字出力
    43                              <1> %macro MACRO_SERIAL_PUTC 1
    44                              <1>         PUSH    AX
    45                              <1>         MOV     AL, %1
    46                              <1>         CALL    dbgSingle
    47                              <1>         POP     AX
    48                              <1> %endmacro
     9                                  %define         __DEBUG                 ; デバッグ時に有効
    10                                  
    11                                          ORG     0x4000
    12 00000000 E9F101                          JMP     mashInit
    13                                  
    14                                  ; //////////////////////////////////////////////////////////////////////////// ;
    15                                  ; --- 定数 ---
    16                                  ;  ██████╗ ██████╗ ███╗  ██╗ ██████╗████████╗
    17                                  ; ██╔════╝██╔═══██╗████╗ ██║██╔════╝╚══██╔══╝
    18                                  ; ██║     ██║   ██║██╔██╗██║╚█████╗    ██║   
    19                                  ; ██║     ██║   ██║██║╚████║ ╚═══██╗   ██║   
    20                                  ; ╚██████╗╚██████╔╝██║ ╚███║██████╔╝   ██║   
    21                                  ;  ╚═════╝ ╚═════╝ ╚═╝  ╚══╝╚═════╝    ╚═╝   
    22                                  ; //////////////////////////////////////////////////////////////////////////// ;
    23                                  cMashLogo:                              ; ロゴ(35x6 = 210byte)
    24                                          ;       ███╗   ███╗                                                        █████╗                                          ██████╗                                        ██╗  ██╗
    25                                          ;       ████╗ ████║                                                       ██╔══██╗                                        ██╔════╝                                        ██║  ██║
    26                                          ;       ██╔████╔██║                                                       ██║  ██║                                        ╚█████╗                                         ███████║
    27                                          ;       ██║╚██╔╝██║                                                       ███████║                                         ╚═══██╗                                        ██╔══██║
    28                                          ;       ██║ ╚═╝ ██║                                                       ██╔══██║                                        ██████╔╝                                        ██║  ██║
    29                                          ;       ╚═╝     ╚═╝                                                       ╚═╝  ╚═╝                                        ╚═════╝                                         ╚═╝  ╚═╝
    30                                          ;       M                                                                 A                                               S                                               H                                             
    31 00000003 DBDBDBBB202020DBDB-             DB      0xdb, 0xdb, 0xdb, 0xbb, 0x20, 0x20, 0x20, 0xdb, 0xdb, 0xdb, 0xbb, 0x20, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xbb, 0x20, 0x20, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xbb, 0xdb, 0xdb, 0xbb, 0x20, 0x20, 0xdb, 0xdb, 0xbb
    31 0000000C DBBB20DBDBDBDBDBBB-
    31 00000015 2020DBDBDBDBDBDBBB-
    31 0000001E DBDBBB2020DBDBBB   
    32 00000026 DBDBDBDBBB20DBDBDB-             DB      0xdb, 0xdb, 0xdb, 0xdb, 0xbb, 0x20, 0xdb, 0xdb, 0xdb, 0xdb, 0xba, 0xdb, 0xdb, 0xc9, 0xcd, 0xcd, 0xdb, 0xdb, 0xbb, 0xdb, 0xdb, 0xc9, 0xcd, 0xcd, 0xcd, 0xcd, 0xbc, 0xdb, 0xdb, 0xba, 0x20, 0x20, 0xdb, 0xdb, 0xba
    32 0000002F DBBADBDBC9CDCDDBDB-
    32 00000038 BBDBDBC9CDCDCDCDBC-
    32 00000041 DBDBBA2020DBDBBA   
    33 00000049 DBDBC9DBDBDBDBC9DB-             DB      0xdb, 0xdb, 0xc9, 0xdb, 0xdb, 0xdb, 0xdb, 0xc9, 0xdb, 0xdb, 0xba, 0xdb, 0xdb, 0xba, 0x20, 0x20, 0xdb, 0xdb, 0xba, 0xc8, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xbb, 0x20, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xba
    33 00000052 DBBADBDBBA2020DBDB-
    33 0000005B BAC8DBDBDBDBDBBB20-
    33 00000064 DBDBDBDBDBDBDBBA   
    34 0000006C DBDBBAC8DBDBC9BCDB-             DB      0xdb, 0xdb, 0xba, 0xc8, 0xdb, 0xdb, 0xc9, 0xbc, 0xdb, 0xdb, 0xba, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xba, 0x20, 0xc8, 0xcd, 0xcd, 0xcd, 0xdb, 0xdb, 0xbb, 0xdb, 0xdb, 0xc9, 0xcd, 0xcd, 0xdb, 0xdb, 0xba
    34 00000075 DBBADBDBDBDBDBDBDB-
    34 0000007E BA20C8CDCDCDDBDBBB-
    34 00000087 DBDBC9CDCDDBDBBA   
    35 0000008F DBDBBA20C8CDBC20DB-             DB      0xdb, 0xdb, 0xba, 0x20, 0xc8, 0xcd, 0xbc, 0x20, 0xdb, 0xdb, 0xba, 0xdb, 0xdb, 0xc9, 0xcd, 0xcd, 0xdb, 0xdb, 0xba, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xc9, 0xbc, 0xdb, 0xdb, 0xba, 0x20, 0x20, 0xdb, 0xdb, 0xba
    35 00000098 DBBADBDBC9CDCDDBDB-
    35 000000A1 BADBDBDBDBDBDBC9BC-
    35 000000AA DBDBBA2020DBDBBA   
    36 000000B2 C8CDBC2020202020C8-             DB      0xc8, 0xcd, 0xbc, 0x20, 0x20, 0x20, 0x20, 0x20, 0xc8, 0xcd, 0xbc, 0xc8, 0xcd, 0xbc, 0x20, 0x20, 0xc8, 0xcd, 0xbc, 0xc8, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xbc, 0x20, 0xc8, 0xcd, 0xbc, 0x20, 0x20, 0xc8, 0xcd, 0xbc
    36 000000BB CDBCC8CDBC2020C8CD-
    36 000000C4 BCC8CDCDCDCDCDBC20-
    36 000000CD C8CDBC2020C8CDBC   
    37                                  
    38                                  cVersionLen:                            ; 版数文字列の長さ
    39 000000D5 1200                            DW      18
    40                                  
    41                                  cVersionStr:                            ; 版数文字列の内容
    42 000000D7 6D6173682073797374-             DB      "mash system v0.1.1"
    42 000000E0 656D2076302E312E31 
    43                                  
    44                                  ; //////////////////////////////////////////////////////////////////////////// ;
    45                                  ; --- 変数 ---
    46                                  ;  ██████╗████████╗ █████╗ ████████╗██╗ ██████╗
    47                                  ; ██╔════╝╚══██╔══╝██╔══██╗╚══██╔══╝██║██╔════╝
    48                                  ; ╚█████╗    ██║   ██║  ██║   ██║   ██║██║     
    49                                  ;  ╚═══██    ██║   ███████║   ██║   ██║██║     
    50                                  ; ██████╔╝   ██║   ██╔══██║   ██║   ██║╚██████╗
    51                                  ; ╚═════╝    ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝
    52                                  ; //////////////////////////////////////////////////////////////////////////// ;
    53                                  
    54                                  ; 表示関連
    55                                  sXpos:
    56 000000E9 00                              DB      0x00                    ; 表示xカーソル
    57                                  sYpos:
    58 000000EA 09                              DB      0x09                    ; 表示yカーソル
    59                                  sColorNormal:
    60 000000EB 0F                              DB      0x0f                    ; 表示色(初期値: 白)
    61                                  sColorError:
    62 000000EC 01                              DB      0x01                    ; 表示色(初期値: 赤?)
    63                                  
    64                                  ; 入出力関連
    65                                  sStdInput:                              ; 標準入力
    66 000000ED 00                              DB      FD_KEYBORD
    67                                  sStdOut:                                ; 標準出力
    68 000000EE 01                              DB      FD_DISPLAY
    69                                  sStdErrout:                             ; 標準エラー出力
    70 000000EF 01                              DB      FD_DISPLAY
    71                                  sOneLineBuf:
    72 000000F0 00<rep 100h>                    times   0x0100 DB 0x00          ; 入力バッファ(256byte)
    73                                  sOneLineSeek:
    74 000001F0 0000                            DW      0x0000                  ; シークオフセット
    75                                  
    76                                  sNowDir:
    77 000001F2 1500                            DW      DIR_ROOT                ; 現在いるディレクトリ
    78                                  
    79                                  ; //////////////////////////////////////////////////////////////////////////// ;
    80                                  ; --- 初期化プログラム ---
    81                                  ; ██╗███╗  ██╗██╗████████╗
    82                                  ; ██║████╗ ██║██║╚══██╔══╝
    83                                  ; ██║██╔██╗██║██║   ██║   
    84                                  ; ██║██║╚████║██║   ██║   
    85                                  ; ██║██║ ╚███║██║   ██║   
    86                                  ; ╚═╝╚═╝  ╚══╝╚═╝   ╚═╝   
    87                                  ; //////////////////////////////////////////////////////////////////////////// ;
    88                                  
    89                                  mashInit:
    90 000001F4 B80000                          MOV     AX, 0x0000              ; レジスタセット
    91 000001F7 8ED8                            MOV     DS, AX
    92 000001F9 8ED0                            MOV     SS, AX
    93 000001FB 8EC0                            MOV     ES, AX
    94 000001FD BCFF3F                          MOV     SP, 0x3fff              ; ｾｸﾞﾎﾟ
    95                                  
    96 00000200 E8BD03                          CALL    rInitMalloc
    97                                          
    98                                  %ifdef __DEBUG
    99                                          ; AX, BX, CX, DX, SI, DI, BP, SP, DS, ES, SS
   100                                          ;MOV     AX, 0x1234
   101                                          ;MOV     BX, 0x2345
   102                                          ;MOV     CX, 0x3456
   103                                          ;MOV     DX, 0x4567
   104                                          ;MOV     SI, 0x5678
   105                                          ;MOV     DI, 0x6789
   106                                          ;MOV     BP, 0x789a
   107                                  %endif
   108                                  
   109 00000203 E81605                          CALL    dbgRegDump
   110                                  
   111                                  %ifdef __DEBUG
   112                                          ;MOV     AX, 0x0000
   113                                          ;MOV     DS, AX
   114                                          ;MOV     SS, AX
   115                                          ;MOV     ES, AX
   116                                  %endif
   117                                  
   118 00000206 E8D803                          CALL    cmdVer                  ; ロゴ+版数表示
   119                                  
   120                                  %ifdef __DEBUG
   121                                          ; スクロールテスト
   122                                  ;.dbgLoop:
   123                                          ;MOV     AH, 0x00
   124                                          ;INT     0x16
   125                                  
   126                                          ;MOV     AH, 0x06
   127                                          ;MOV     AL, 0x01
   128                                          ;MOV     BH, 0x07
   129                                          ;MOV     CX, 0x0000
   130                                          ;MOV     DH, 24
   131                                          ;MOV     DL, 79
   132                                          ;INT     0x10
   133                                  
   134                                          ;JMP     .dbgLoop
   135                                  %endif
   136                                          
   137 00000209 EB00                            JMP     mashLoop                ; ループ処理へ移行
   138                                  
   139                                  ; //////////////////////////////////////////////////////////////////////////// ;
   140                                  ; --- ループプログラム ---
   141                                  ; ██╗      ██████╗  ██████╗ ██████╗ 
   142                                  ; ██║     ██╔═══██╗██╔═══██╗██╔══██╗
   143                                  ; ██║     ██║   ██║██║   ██║██████╔╝
   144                                  ; ██║     ██║   ██║██║   ██║██╔═══╝ 
   145                                  ; ███████╗╚██████╔╝╚██████╔╝██║     
   146                                  ; ╚══════╝ ╚═════╝  ╚═════╝ ╚═╝     
   147                                  ; //////////////////////////////////////////////////////////////////////////// ;
   148                                  
   149                                  mashLoop:
   150 0000020B E8B402                          CALL    libSetCursolNextLine    ; 改行
   151 0000020E E88303                          CALL    rOneLineClear           ; バッファクリア
   152                                  .inputLoop:
   153 00000211 E82503                          CALL    rOneLineInput           ; キーボード入力 → バッファ+出力
   154 00000214 80FC00                          CMP     AH, 0x00
   155                                  
   156                                  ; debug ---->
   157                                  ; in  : AX      ダンプするバイト数
   158                                  ;     : DS:DI   ダンプ開始アドレス
   159 00000217 B80000                          MOV     AX, 0x0000
   160 0000021A 8ED8                            MOV     DS, AX
   161 0000021C B81000                          MOV     AX, 0x0010
   162 0000021F BF[E800]                        MOV     DI, sOneLineBuf-8
   163 00000222 E87804                          CALL    dbgDump
   164                                  
   165                                          ;MOV     AX, 0x0000
   166                                          ;MOV     DS, AX
   167                                          ;MOV     AX, 0x0010
   168                                          ;MOV     DI, sOneLineBuf+250
   169                                          ;CALL    dbgDump
   170                                  ; <---- debug
   171                                  
   172 00000225 80FC00                          CMP     AH, 0x00
   173 00000228 74E7                            JZ      .inputLoop
   174                                  
   175                                          ;CALL    rPutCR                  ; 改行
   176                                          ;MOV     AX, 0x0000
   177                                          ;MOV     DS, AX
   178                                          ;MOV     ES, AX
   179                                          ;MOV     SS, AX
   180                                          ;MOV     DI, [sOneLineBuf]
   181                                          ;CALL    sysPrintf               ; 表示
   182                                  
   183                                          ;CALL    sysPwd                  ; 現在のディレクトリを表示
   184                                  
   185                                          ;MOV     BP, .sAllow             ; ">"表示
   186                                          ;CALL    sysEcho
   187                                          
   188 0000022A EBDF                            JMP     mashLoop                ; 永遠にループする
   189                                  .sAllow:
   190                                  
   191                                  ; //////////////////////////////////////////////////////////////////////////// ;
   192                                  ; --- ビルトインコマンド ---
   193                                  ;  ██████╗ ██████╗ ███╗   ███╗███╗   ███╗ █████╗ ███╗  ██╗██████╗ 
   194                                  ; ██╔════╝██╔═══██╗████╗ ████║████╗ ████║██╔══██╗████╗ ██║██╔══██╗
   195                                  ; ██║     ██║   ██║██╔████╔██║██╔████╔██║██║  ██║██╔██╗██║██║  ██║
   196                                  ; ██║     ██║   ██║██║╚██╔╝██║██║╚██╔╝██║███████║██║╚████║██║  ██║
   197                                  ; ╚██████╗╚██████╔╝██║ ╚═╝ ██║██║ ╚═╝ ██║██╔══██║██║ ╚███║██████╔╝
   198                                  ;  ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚══╝╚═════╝ 
   199                                  ; //////////////////////////////////////////////////////////////////////////// ;
   200                                  
   201                                  ; dir コマンド
   202                                  ; 現在のディレクトリのフォルダ、ファイルを表示する
   203                                  sysDir:
   204 0000022C E81E04                          CALL    rPushReg                ; レジスタ退避
   205                                  
   206 0000022F B90002                          MOV     CX, 0x0200              ; 現在のディレクトリ用のメモリを取得
   207 00000232 E82400                          CALL    sysMalloc
   208 00000235 892E[4702]                      MOV WORD [.allocAddr1], BP
   209 00000239 B90002                          MOV     CX, 0x0200              ; リンク先のディレクトリ用のメモリを取得
   210 0000023C E81A00                          CALL    sysMalloc
   211 0000023F 892E[4902]                      MOV WORD [.allocAddr2], BP
   212                                  
   213 00000243 E82404                          CALL    rPopReg                 ; レジスタ取得
   214 00000246 C3                              RET
   215                                  .allocAddr1:
   216 00000247 0000                            DB      0x00, 0x00
   217                                  .allocAddr2:
   218 00000249 0000                            DB      0x00, 0x00
   219                                  
   220                                  ; pwd コマンド
   221                                  ; 現在のディレクトリを標準出力に渡す
   222                                  sysPwd:
   223 0000024B E8FF03                          CALL    rPushReg                ; レジスタ退避
   224 0000024E E81904                          CALL    rPopReg                 ; レジスタ取得
   225 00000251 C3                              RET
   226                                  
   227                                  ; echo コマンド
   228                                  ; 文字列の表示(エスケープシーケンスあり)
   229                                  ; in  : BP      表示する文字列の先頭ポインタ
   230                                  ; out : 画面表示
   231                                  sysEcho:
   232 00000252 E8F803                          CALL    rPushReg                ; レジスタ退避
   233 00000255 E81204                          CALL    rPopReg                 ; レジスタ取得
   234 00000258 C3                              RET
   235                                  
   236                                  ; malloc コマンド
   237                                  ; 指定されたバイト数の確保した先頭アドレスを返却する
   238                                  ; 実際の確保は16バイト単位で行われる
   239                                  ; 一度に確保できるのは 4080(255* 16)バイト まで
   240                                  ;
   241                                  ; アロケーションメモリ: 0x1000:0x0000 ~ 0x1000:0xffff
   242                                  ; アロケーションテーブル: 0x0000:0x1000 ~ 0x0000:0x1fff
   243                                  ;
   244                                  ; in  : CX      確保したいメモリ容量(バイト)
   245                                  ; out : AX      結果 0成功 1失敗
   246                                  ;     : SS:BP   確保した先頭ポインタ(確保に成功した場合)
   247                                  sysMalloc:
   248 00000259 E8F103                          CALL    rPushReg                ; レジスタ退避
   249 0000025C 1E                              PUSH    DS                      ; セグメント退避
   250                                  
   251 0000025D B80000                          MOV     AX, 0x0000              ; テーブルのセグメントは 0 、以後ルーチン脱出直前まで0のまま
   252 00000260 8ED8                            MOV     DS, AX
   253 00000262 81F90010                        CMP     CX, 0x1000              ; 確保メモリ上限チェック
   254 00000266 0F838300                        JAE     .retError
   255 0000026A 83F900                          CMP     CX, 0x0000              ; 0バイトかチェック
   256 0000026D 747E                            JZ      .retError
   257 0000026F 83C10F                          ADD     CX, 0x000f              ; 確保するブロック数(1ブロック16バイト) = (確保したいバイト + 15) /16
   258 00000272 C1E904                          SHR     CX, 0x04
   259 00000275 880E[FF02]                      MOV BYTE [.aSize], CL
   260 00000279 C706[FC02]0010                  MOV WORD [.aFAdr], 0x1000       ; テーブルの先頭ポインタは 0x1000
   261 0000027F C606[FE02]00                    MOV BYTE [.aCnt], 0x00
   262 00000284 C706[0003]0010                  MOV WORD [.aRet], 0x1000
   263                                  .mallocLoop:
   264 0000028A 8B3E[FC02]                      MOV WORD DI, [.aFAdr]           ; シークしている番地が0か確認
   265 0000028E 3E8A25                          MOV BYTE AH, [DS:DI]
   266 00000291 80FC00                          CMP     AH, 0x00
   267 00000294 7419                            JZ      .cntChk
   268 00000296 C606[FE02]00                    MOV BYTE [.aCnt], 0x00         ; シーク番地が0ではないので連続数をリセット
   269 0000029B A1[FC02]                        MOV WORD AX, [.aFAdr]           ; アロケーションテーブルをシーク
   270 0000029E 40                              INC     AX
   271 0000029F A3[FC02]                        MOV WORD [.aFAdr], AX
   272 000002A2 A3[0003]                        MOV WORD [.aRet], AX            ; シーク以前には確保できる領域がないため次へ
   273                                  .exitChk:
   274 000002A5 A1[FC02]                        MOV WORD AX, [.aFAdr]           ; テーブルの末尾まで行ったらもう見込みなし
   275 000002A8 3D0020                          CMP     AX, 0x2000              ; 末尾は 0x1fff
   276 000002AB 75DD                            JNZ     .mallocLoop             ; 末尾ではないなら次の1バイトを
   277 000002AD EB3E                            JMP     .retError
   278                                  .cntChk:
   279 000002AF 8A3E[FE02]                      MOV BYTE BH, [.aCnt]            ; 連続空きブロックカウントをカウントアップ
   280 000002B3 FEC7                            INC     BH                      ; AHには連続空きブロック
   281 000002B5 883E[FE02]                      MOV BYTE [.aCnt], BH
   282 000002B9 8A2E[FF02]                      MOV BYTE CH, [.aSize]           ; 連続空きブロックで注文した領域を充足するか？
   283 000002BD 38EF                            CMP     BH, CH                  ; ALには注文されたブロック数(AHには連続空きブロック)
   284 000002BF 7409                            JZ      .fillTbl
   285 000002C1 A1[FC02]                        MOV WORD AX, [.aFAdr]           ; まだ充足しないため検索を続ける(連続空きブロックは継続)
   286 000002C4 40                              INC     AX
   287 000002C5 A3[FC02]                        MOV WORD [.aFAdr], AX
   288 000002C8 EBDB                            JMP     .exitChk                ; 末尾チェックへ
   289                                  .fillTbl:
   290 000002CA A1[FC02]                        MOV WORD AX, [.aFAdr]           ; 連続空きブロックの先頭アドレスを取得
   291 000002CD 89C7                            MOV     DI, AX                  ; 以後空きブロックのアドレスは DI にて参照
   292 000002CF 8A26[FE02]                      MOV BYTE AH, [.aCnt]            ; 以後注文されたブロック数は AH にて参照
   293 000002D3 B100                            MOV     CL, 0x00
   294                                  .fillLoop:
   295 000002D5 FEC1                            INC     CL                      ; aCnt++
   296 000002D7 3E880D                          MOV BYTE [DS:DI], CL            ; free用に意味のある値を格納
   297 000002DA 4F                              DEC     DI                      ; aFAdr--
   298 000002DB 38CC                            CMP     AH, CL                  ; 注文されたブロック数だけ書き込んだら終了
   299 000002DD 75F6                            JNZ     .fillLoop
   300 000002DF A1[0003]                        MOV WORD AX, [.aRet]            ; 呼び出し元に返却するのは (連続空きブロックの先頭アドレス - 0X10000) * 16
   301 000002E2 2D0010                          SUB     AX, 0x1000
   302 000002E5 C1E004                          SHL     AX, 0x04
   303 000002E8 A3[0003]                        MOV WORD [.aRet], AX
   304 000002EB EB06                            JMP     .return
   305                                  .retError:
   306 000002ED C706[0003]FFFF                  MOV WORD [.aRet], 0xffff        ; とりあえずゴミデータ
   307                                  .return:
   308 000002F3 E87403                          CALL    rPopReg                 ; レジスタ取得
   309 000002F6 8B2E[0003]                      MOV WORD BP, [.aRet]            ; 取得した先頭アドレスを格納
   310 000002FA 1F                              POP     DS                      ; mallocをコールする前のセグメントに戻す
   311 000002FB C3                              RET                             ; 呼び出し元へ     
   312                                  .aFAdr:                                 ; テーブル内シークアドレス
   313 000002FC 0000                            DB      0x00, 0x00
   314                                  .aCnt:                                  ; 現時点の連続空きブロック
   315 000002FE 00                              DB      0x00
   316                                  .aSize:                                 ; 検索するべき連続空きブロック
   317 000002FF 00                              DB      0x00
   318                                  .aRet:                                  ; 返却するアロケーションメモリアドレス
   319 00000300 0000                            DB      0x00, 0x00
   320                                  
   321                                  ; free コマンド
   322                                  ; 指定されたアドレスを含む確保領域を解放する
   323                                  ; 実際の確保は16バイト単位で行われる
   324                                  ;
   325                                  ; アロケーションメモリ: 0x1000:0x0000 ~ 0x1000:0xffff
   326                                  ; アロケーションテーブル: 0x0000:0x1000 ~ 0x0000:0x1fff
   327                                  ;
   328                                  ; in  : BP      解放したいアドレス(確保した領域内ならどこでも)
   329                                  ; out : AX      結果 0成功 1失敗
   330                                  sysFree:
   331 00000302 E84803                          CALL    rPushReg                ; レジスタ退避
   332 00000305 1E                              PUSH    DS                      ; セグメント退避
   333 00000306 89EF                            MOV     DI, BP                  ; DI ← (BP / 16) + 0x1000
   334                                  
   335 00000308 B80000                          MOV     AX, 0x0000
   336 0000030B 8ED8                            MOV     DS, AX
   337 0000030D C1EF04                          SHR     DI, 0x04
   338 00000310 81C70010                        ADD     DI, 0x1000
   339                                  .freeLoop:                              ; 確保した先頭まで戻る
   340 00000314 3E8A25                          MOV BYTE AH, [DS:DI]            ; sTbl[DI]
   341 00000317 80FC00                          CMP     AH, 0x00                ; 値が 0x00 なら異常メモリを入力している
   342 0000031A 740A                            JZ      .next
   343 0000031C 3EC60500                        MOV BYTE [DS:DI], 0x00
   344 00000320 47                              INC     DI
   345 00000321 80FC01                          CMP     AH, 0x01                ; 値が 0x01 まで続ける
   346 00000324 75EE                            JNZ     .freeLoop
   347                                  .next:
   348 00000326 1F                              POP     DS                      ; セグメント戻す
   349 00000327 E84003                          CALL    rPopReg                 ; レジスタ取得
   350 0000032A C3                              RET
   351                                  
   352                                  ; printf 等の文字列解析+文字出力(エスケープシーケンスあり)
   353                                  ; 256文字まで(終端文字含む)
   354                                  ; %c: 文字, %s: 文字列, %d: 10進数, %x: 16進数(小文字), %X: 16進数(大文字)
   355                                  ; \a: 警報音, \n: 復帰改行, \r: 復帰, \t: タブ, \o: 更新なしで次の文字へ, \\, \?, \', \": 1文字, \0: 文字列終了
   356                                  ; \Uxx: カーソルをxx(10新2桁)行上, \Dxx: 下, \Rxx: 右, \Lxx: 左
   357                                  ; \Xxx: カーソルのx座標をxx(10新2桁)に移動, \Yxx: カーソルのx座標をxx(10新2桁)に移動, 
   358                                  ; in  : AX 出力先ファイルディスクリプタ
   359                                  ;     : SI 文字列の先頭ポインタ
   360                                  ;     : DI 変数の先頭ポインタ(DI:1つ目の変数, DI+4:2つ目の変数...)
   361                                  sysPrintf:
   362 0000032B E81F03                          CALL    rPushReg                ; レジスタ退避
   363                                  
   364 0000032E E83903                          CALL    rPopReg                 ; レジスタ取得
   365 00000331 C3                              RET
   366                                  
   367                                  ; 文字列の表示
   368                                  ; 終端文字(0x00)を確認するまで文字を表示し続ける
   369                                  ; in  : BX      表示する文字列
   370                                  ;       DS:BX   データポインタ
   371                                  ; out : AX      表示結果
   372                                  ;                   0: 成功
   373                                  ;                   1: 256文字以上の文字列を表示しようとした
   374                                  ;                   2: その他の失敗
   375                                  sysPrint:
   376 00000332 E81803                          CALL    rPushReg                ; レジスタ退避
   377                                  
   378                                  
   379                                  
   380 00000335 E83203                          CALL    rPopReg                 ; レジスタ取得
   381 00000338 C3                              RET
   382                                  
   383                                  ; 単一の文字出力
   384                                  ; カーソル位置の更新も行う
   385                                  ; in  : AL      表示する文字
   386                                  sysPutChar:
   387                                  
   388                                  ; //////////////////////////////////////////////////////////////////////////// ;
   389                                  ; --- ライブラリ ---
   390                                  ; ██╗     ██╗██████╗ ██████╗  █████╗ ██████╗ ██╗   ██╗
   391                                  ; ██║     ██║██╔══██╗██╔══██╗██╔══██╗██╔══██╗╚██╗ ██╔╝
   392                                  ; ██║     ██║██████╔╝██████╔╝██║  ██║██████╔╝ ╚████╔╝ 
   393                                  ; ██║     ██║██╔══██╗██╔══██╗███████║██╔══██╗  ╚██╔╝  
   394                                  ; ███████╗██║██████╔╝██║  ██║██╔══██║██║  ██║   ██║   
   395                                  ; ╚══════╝╚═╝╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   
   396                                  ; //////////////////////////////////////////////////////////////////////////// ;
   397                                  
   398                                  ; //////////////////////////////////////////////////////////////////////////// ;
   399                                  ; ctype.h(c89)                                                                 ;
   400                                  ;       libIsalnum      libIsAlpha      libIsblank      libIscntrl             ;
   401                                  ;       libIsdigit      libIsgraph      libIslower      libIsprint             ;
   402                                  ;       libIspuct       libIsspace      libIsupper      libIsxdigit            ;
   403                                  ;       libTolower      libToupper                                             ;
   404                                  ; //////////////////////////////////////////////////////////////////////////// ;
   405                                  
   406                                  ; 英大文字か判定
   407                                  ; isupper(c89) 相当
   408                                  ; in  : AL      asciiコード
   409                                  ; out : AH      0: 大文字以外
   410                                  ;               0以外: 大文字
   411                                  libIsupper:
   412 00000339 3C41                            CMP     AL, 0x41                ; A
   413 0000033B 7208                            JB      .ng                     ; AL < 'A' ならNG
   414 0000033D 3C5A                            CMP     AL, 0x5a                ; Z
   415 0000033F 7704                            JA      .ng                     ; AL > 'Z' ならNG
   416                                  .ok:
   417 00000341 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   418 00000343 EB04                            JMP     .exit
   419                                  .ng:
   420 00000345 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   421 00000347 EB00                            JMP     .exit
   422                                  .exit:
   423 00000349 C3                              RET
   424                                  
   425                                  ; 英小文字か判定
   426                                  ; isupper(c89) 相当
   427                                  ; in  : AL      asciiコード
   428                                  ; out : AH      0: 小文字以外
   429                                  ;               0以外: 小文字
   430                                  libIslower:
   431 0000034A 3C61                            CMP     AL, 0x61                ; a
   432 0000034C 7208                            JB      .ng                     ; AL < 'a' ならNG
   433 0000034E 3C7A                            CMP     AL, 0x7a                ; z
   434 00000350 7704                            JA      .ng                     ; AL > 'z' ならNG
   435                                  .ok:
   436 00000352 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   437 00000354 EB04                            JMP     .exit
   438                                  .ng:
   439 00000356 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   440 00000358 EB00                            JMP     .exit
   441                                  .exit:
   442 0000035A C3                              RET
   443                                  
   444                                  ; 数字か判定
   445                                  ; isdigit(c89) 相当
   446                                  ; in  : AL      asciiコード
   447                                  ; out : AH      0: 小文字以外
   448                                  ;               0以外: 小文字
   449                                  libIsdigit:
   450 0000035B 3C30                            CMP     AL, 0x30                ; 0
   451 0000035D 7208                            JB      .ng                     ; AL < '0' ならNG
   452 0000035F 3C39                            CMP     AL, 0x39                ; 9
   453 00000361 7704                            JA      .ng                     ; AL > '9' ならNG
   454                                  .ok:
   455 00000363 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   456 00000365 EB04                            JMP     .exit
   457                                  .ng:
   458 00000367 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   459 00000369 EB00                            JMP     .exit
   460                                  .exit:
   461 0000036B C3                              RET
   462                                  
   463                                  ; 空白文字を含む表示文字か判定
   464                                  ; isprint(c89) 相当
   465                                  ; in  : AL      asciiコード
   466                                  ; out : AH      0: 表示文字以外
   467                                  ;               0以外: 表示文字
   468                                  libIsprint:
   469 0000036C 3C20                            CMP     AL, 0x20
   470 0000036E 7208                            JB      .ng                     ; AL < 0x20 ならNG
   471 00000370 3C7E                            CMP     AL, 0x7e
   472 00000372 7704                            JA      .ng                     ; AL > 0x7e ならNG
   473                                  .ok:
   474 00000374 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   475 00000376 EB04                            JMP     .exit
   476                                  .ng:
   477 00000378 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   478 0000037A EB00                            JMP     .exit
   479                                  .exit:
   480 0000037C C3                              RET
   481                                  
   482                                  ; 空白文字を除く表示文字か判定
   483                                  ; isprint(c89) 相当
   484                                  ; in  : AL      asciiコード
   485                                  ; out : AH      0: 表示文字以外
   486                                  ;               0以外: 表示文字
   487                                  libIsgraph:
   488 0000037D 3C21                            CMP     AL, 0x21
   489 0000037F 7208                            JB      .ng                     ; AL < 0x21 ならNG
   490 00000381 3C7E                            CMP     AL, 0x7e
   491 00000383 7704                            JA      .ng                     ; AL > 0x7e ならNG
   492                                  .ok:
   493 00000385 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   494 00000387 EB04                            JMP     .exit
   495                                  .ng:
   496 00000389 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   497 0000038B EB00                            JMP     .exit
   498                                  .exit:
   499 0000038D C3                              RET
   500                                  
   501                                  ; ブランク文字か判定
   502                                  ; isblank(c89) 相当
   503                                  ; in  : AL      asciiコード
   504                                  ; out : AH      0: ブランク文字以外
   505                                  ;               0以外: ブランク文字
   506                                  libIsblank:
   507 0000038E 3C20                            CMP     AL, 0x20                ; ' 'ならOK
   508 00000390 7406                            JZ      .ok
   509 00000392 3C09                            CMP     AL, 0x09
   510 00000394 7402                            JZ      .ok                     ; '\t'ならOK
   511 00000396 EB04                            JMP     .ng
   512                                  .ok:
   513 00000398 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   514 0000039A EB04                            JMP     .exit
   515                                  .ng:
   516 0000039C B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   517 0000039E EB00                            JMP     .exit
   518                                  .exit:
   519 000003A0 C3                              RET
   520                                  
   521                                  ; 空白類文字か判定
   522                                  ; isspace(c89) 相当
   523                                  ; in  : AL      asciiコード
   524                                  ; out : AH      0: 空白類文字以外
   525                                  ;               0以外: 空白類文字
   526                                  libIsspace:
   527 000003A1 3C09                            CMP     AL, 0x09
   528 000003A3 7416                            JZ      .ok                     ; '\t'ならOK
   529 000003A5 3C0A                            CMP     AL, 0x0a
   530 000003A7 7412                            JZ      .ok                     ; '\n'ならOK
   531 000003A9 3C0B                            CMP     AL, 0x0b
   532 000003AB 740E                            JZ      .ok                     ; '\v'ならOK
   533 000003AD 3C0C                            CMP     AL, 0x0c
   534 000003AF 740A                            JZ      .ok                     ; '\f'ならOK
   535 000003B1 3C0D                            CMP     AL, 0x0d
   536 000003B3 7406                            JZ      .ok                     ; '\r'ならOK
   537 000003B5 3C20                            CMP     AL, 0x20
   538 000003B7 7402                            JZ      .ok                     ; ' 'ならOK
   539 000003B9 EB04                            JMP     .ng
   540                                  .ok:
   541 000003BB B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   542 000003BD EB04                            JMP     .exit
   543                                  .ng:
   544 000003BF B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   545 000003C1 EB00                            JMP     .exit
   546                                  .exit:
   547 000003C3 C3                              RET
   548                                  
   549                                  ; 制御文字か判定
   550                                  ; iscntrl(c89) 相当
   551                                  ; in  : AL      asciiコード
   552                                  ; out : AH      0: 制御文字以外
   553                                  ;               0以外: 制御文字
   554                                  libIscntrl:
   555 000003C4 3C7F                            CMP     AL, 0x7f
   556 000003C6 7408                            JZ      .ok                     ; '\del'ならOK
   557 000003C8 3C00                            CMP     AL, 0x00
   558 000003CA 7208                            JB      .ng                     ; AL < 0x00 ならNG
   559 000003CC 3C1F                            CMP     AL, 0x1f
   560 000003CE 7704                            JA      .ng                     ; AL > 0x1f ならNG
   561                                  .ok:
   562 000003D0 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   563 000003D2 EB04                            JMP     .exit
   564                                  .ng:
   565 000003D4 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   566 000003D6 EB00                            JMP     .exit
   567                                  .exit:
   568 000003D8 C3                              RET 
   569                                  
   570                                  ; 16進数字か判定
   571                                  ; isxdigit(c89) 相当
   572                                  ; in  : AL      asciiコード
   573                                  ; out : AH      0: 16進文字以外
   574                                  ;               0以外: 16進文字
   575                                  libIsxdigit:
   576 000003D9 3C30                            CMP     AL, 0x30                ; 0
   577 000003DB 7206                            JB      .next1                  ; AL < '0' ならNG
   578 000003DD 3C39                            CMP     AL, 0x39                ; 9
   579 000003DF 7702                            JA      .next1                  ; AL > '9' ならNG
   580 000003E1 EB14                            JMP     .ok
   581                                  .next1:
   582 000003E3 3C41                            CMP     AL, 0x41                ; A
   583 000003E5 7206                            JB      .next2                  ; AL < 'A' ならNG
   584 000003E7 3C46                            CMP     AL, 0x46                ; F
   585 000003E9 7702                            JA      .next2                  ; AL > 'F' ならNG
   586 000003EB EB0A                            JMP     .ok
   587                                  .next2:
   588 000003ED 3C61                            CMP     AL, 0x61                ; a
   589 000003EF 720A                            JB      .ng                     ; AL < 'a' ならNG
   590 000003F1 3C66                            CMP     AL, 0x66                ; f
   591 000003F3 7706                            JA      .ng                     ; AL > 'f' ならNG
   592 000003F5 EB00                            JMP     .ok
   593                                  .ok:
   594 000003F7 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   595 000003F9 EB04                            JMP     .exit
   596                                  .ng:
   597 000003FB B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   598 000003FD EB00                            JMP     .exit
   599                                  .exit:
   600 000003FF C3                              RET 
   601                                  
   602                                  ; 英文字か判定
   603                                  ; isalpha(c89) 相当
   604                                  ; in  : AL      asciiコード
   605                                  ; out : AH      0: 英文字以外
   606                                  ;               0以外: 英文字
   607                                  libIsalpha:
   608 00000400 E836FF                          CALL    libIsupper              ; 大文字か確認
   609 00000403 80FC00                          CMP     AH, 0x00
   610 00000406 750A                            JNZ     .ok
   611 00000408 E83FFF                          CALL    libIslower              ; 小文字か確認
   612 0000040B 80FC00                          CMP     AH, 0x00
   613 0000040E 7502                            JNZ     .ok
   614 00000410 EB04                            JMP     .ng
   615                                  .ok:
   616 00000412 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   617 00000414 EB04                            JMP     .exit
   618                                  .ng:
   619 00000416 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   620 00000418 EB00                            JMP     .exit
   621                                  .exit:
   622 0000041A C3                              RET 
   623                                  
   624                                  ; 英文字or数字か判定
   625                                  ; isalnum(c89) 相当
   626                                  ; in  : AL      asciiコード
   627                                  ; out : AH      0: 英文字でも数字でもない
   628                                  ;               0以外: 英文字or数字
   629                                  libIsalnum:
   630 0000041B E81BFF                          CALL    libIsupper              ; 大文字か確認
   631 0000041E 80FC00                          CMP     AH, 0x00
   632 00000421 7512                            JNZ     .ok
   633 00000423 E824FF                          CALL    libIslower              ; 小文字か確認
   634 00000426 80FC00                          CMP     AH, 0x00
   635 00000429 750A                            JNZ     .ok
   636 0000042B E82DFF                          CALL    libIsdigit              ; 数字か確認
   637 0000042E 80FC00                          CMP     AH, 0x00
   638 00000431 7502                            JNZ     .ok
   639 00000433 EB04                            JMP     .ng
   640                                  .ok:
   641 00000435 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   642 00000437 EB04                            JMP     .exit
   643                                  .ng:
   644 00000439 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   645 0000043B EB00                            JMP     .exit
   646                                  .exit:
   647 0000043D C3                              RET 
   648                                  
   649                                  ; 区切り文字か判定(区切り文字 = (!(isalnum) & isgraph)
   650                                  ; ispunct(c89) 相当
   651                                  ; in  : AL      asciiコード
   652                                  ; out : AH      0: 区切り文字以外
   653                                  ;               0以外: 区切り文字
   654                                  libIspunct:
   655 0000043E E8DAFF                          CALL    libIsalnum              ; 英文字or数字か確認
   656 00000441 80FC00                          CMP     AH, 0x00
   657 00000444 750E                            JNZ     .ng                     ; 英文字or数字ならNG
   658 00000446 E834FF                          CALL    libIsgraph              ; 空白を除く印字可能文字か確認
   659 00000449 80FC00                          CMP     AH, 0x00
   660 0000044C 7502                            JNZ     .ok                     ; 印字可能文字ならOK
   661 0000044E EB04                            JMP     .ng
   662                                  .ok:
   663 00000450 B401                            MOV     AH, 0x01                ; OKなら 1 を返却
   664 00000452 EB04                            JMP     .exit
   665                                  .ng:
   666 00000454 B400                            MOV     AH, 0x00                ; NGなら 0 を返却
   667 00000456 EB00                            JMP     .exit
   668                                  .exit:
   669 00000458 C3                              RET
   670                                  
   671                                  ; 大文字を小文字に変換
   672                                  ; tolower(c89) 相当
   673                                  ; in  : AL      asciiコード
   674                                  ; out : AH      変換後asciiコード
   675                                  libTolower:
   676 00000459 E8DDFE                          CALL    libIsupper              ; 大文字か判定
   677 0000045C 80FC00                          CMP     AH, 0x00
   678 0000045F 7402                            JZ      .exit                   ; 大文字ではないなら変換しない
   679 00000461 0420                            ADD     AL, 0x20
   680                                  .exit:
   681 00000463 88C4                            MOV     AH, AL
   682 00000465 C3                              RET
   683                                  
   684                                  ; 小文字を大文字に変換
   685                                  ; toupper(c89) 相当
   686                                  ; in  : AL      asciiコード
   687                                  ; out : AH      変換後asciiコード
   688                                  libToupper:
   689 00000466 E8E1FE                          CALL    libIslower              ; 小文字か判定
   690 00000469 80FC00                          CMP     AH, 0x00
   691 0000046C 7402                            JZ      .exit                   ; 小文字ではないなら変換しない
   692 0000046E 2C20                            SUB     AL, 0x20
   693                                  .exit:
   694 00000470 88C4                            MOV     AH, AL
   695 00000472 C3                              RET
   696                                  
   697                                  ; //////////////////////////////////////////////////////////////////////////// ;
   698                                  ; escseq.h                                                                     ;
   699                                  ;       libSetCursol            libSlideDisp            libSetCursolNextCol    ;
   700                                  ;       libSetCursolNextLine                                                   ;
   701                                  ; //////////////////////////////////////////////////////////////////////////// ;
   702                                  
   703                                  ; カーソル表示更新
   704                                  libSetCursol:
   705 00000473 E8D701                          CALL    rPushReg                ; レジスタ退避
   706                                  
   707 00000476 B402                            MOV     AH, 0x02
   708 00000478 B700                            MOV     BH, 0x00
   709 0000047A 8A16[E900]                      MOV BYTE DL, [sXpos]
   710 0000047E 8A36[EA00]                      MOV BYTE DH, [sYpos]
   711 00000482 CD10                            INT     0x10
   712                                  
   713 00000484 E8E301                          CALL    rPopReg                 ; レジスタ取得
   714 00000487 C3                              RET
   715                                  
   716                                  ; 画面表示を1行上に移動
   717                                  libSlideDisp:
   718 00000488 E8C201                          CALL    rPushReg                ; レジスタ退避
   719                                  
   720 0000048B B406                            MOV     AH, 0x06
   721 0000048D B001                            MOV     AL, 0x01
   722 0000048F B707                            MOV     BH, 0x07
   723 00000491 B90000                          MOV     CX, 0x0000
   724 00000494 B618                            MOV     DH, 24
   725 00000496 B24F                            MOV     DL, 79
   726 00000498 CD10                            INT     0x10
   727                                  
   728 0000049A E8CD01                          CALL    rPopReg                 ; レジスタ取得
   729 0000049D C3                              RET
   730                                  
   731                                  ; カーソルを次の列へ
   732                                  libSetCursolNextCol:
   733 0000049E E8AC01                          CALL    rPushReg                ; レジスタ退避
   734                                  
   735 000004A1 8A26[E900]                      MOV BYTE AH, [sXpos]            ; 取得
   736 000004A5 A0[EA00]                        MOV BYTE AL, [sYpos]
   737                                  
   738 000004A8 80FC4F                          CMP     AH, DISP_COLSIZE
   739 000004AB 740E                            JZ      .newLine
   740                                  
   741 000004AD FEC4                            INC     AH
   742 000004AF 8826[E900]                      MOV BYTE [sXpos], AH            ; 設定
   743 000004B3 A2[EA00]                        MOV BYTE [sYpos], AL
   744 000004B6 E86B00                          CALL    rSetCursol              ; カーソル表示更新
   745 000004B9 EB03                            JMP     .next
   746                                  .newLine:
   747 000004BB E80400                          CALL    libSetCursolNextLine
   748                                  .next:
   749 000004BE E8A901                          CALL    rPopReg                 ; レジスタ取得
   750 000004C1 C3                              RET
   751                                  
   752                                  ; カーソルを次の行へ
   753                                  libSetCursolNextLine:
   754 000004C2 E88801                          CALL    rPushReg                ; レジスタ退避
   755                                  
   756 000004C5 8A26[E900]                      MOV BYTE AH, [sXpos]            ; 取得
   757 000004C9 A0[EA00]                        MOV BYTE AL, [sYpos]
   758                                  
   759 000004CC 3C18                            CMP     AL, DISP_LINESIZE
   760 000004CE 7507                            JNZ     .nextLine               ; 一番下じゃないなら普通の改行
   761 000004D0 80FC4F                          CMP     AH, DISP_COLSIZE
   762 000004D3 750F                            JNZ     .slideLine              ; 一番右じゃないならスクロール(79列目に出力するとBIOS側でスクロールする)
   763 000004D5 EB10                            JMP     .nonSlide
   764                                  .nextLine:
   765 000004D7 B400                            MOV     AH, 0x00
   766 000004D9 FEC0                            INC     AL
   767                                  
   768 000004DB 8826[E900]                      MOV BYTE [sXpos], AH            ; 設定
   769 000004DF A2[EA00]                        MOV BYTE [sYpos], AL
   770 000004E2 EB0D                            JMP     .setCursol
   771                                  .slideLine:
   772 000004E4 E8A1FF                          CALL    libSlideDisp
   773                                  .nonSlide:
   774 000004E7 C606[E900]00                    MOV BYTE [sXpos], 0x00          ; 設定
   775 000004EC C606[EA00]18                    MOV BYTE [sYpos], DISP_LINESIZE
   776                                  .setCursol:                             ; カーソル位置更新
   777 000004F1 E83000                          CALL    rSetCursol
   778                                  
   779 000004F4 E87301                          CALL    rPopReg                 ; レジスタ取得
   780 000004F7 C3                              RET
   781                                  
   782                                  ; //////////////////////////////////////////////////////////////////////////// ;
   783                                  ; stdio.h                                                                      ;
   784                                  ;       libPutchar
   785                                  ; //////////////////////////////////////////////////////////////////////////// ;
   786                                  
   787                                  ; 1文字出力
   788                                  ; static変数の座標を参照する
   789                                  ; putchar(c89) 相当
   790                                  ; in  : AL      asciiコード
   791                                  ; out : (なし)
   792                                  libPutchar:
   793 000004F8 E85201                          CALL    rPushReg                ; レジスタ退避
   794 000004FB 06                              PUSH    ES
   795                                  
   796 000004FC A2[2305]                        MOV BYTE [.aChar], AL
   797                                  
   798 000004FF B80000                          MOV     AX, 0x0000
   799 00000502 8EC0                            MOV     ES, AX
   800 00000504 B413                            MOV     AH, 0x13
   801 00000506 B000                            MOV     AL, 0x00
   802 00000508 B700                            MOV     BH, 0x00
   803 0000050A 8A1E[EB00]                      MOV BYTE BL, [sColorNormal]
   804 0000050E B90100                          MOV     CX, 0x0001
   805 00000511 8A16[E900]                      MOV BYTE DL, [sXpos]
   806 00000515 8A36[EA00]                      MOV BYTE DH, [sYpos]
   807 00000519 BD[2305]                        MOV     BP, .aChar
   808 0000051C CD10                            INT     0x10
   809                                  
   810 0000051E 07                              POP     ES
   811 0000051F E84801                          CALL    rPopReg                 ; レジスタ取得
   812 00000522 C3                              RET
   813                                  .aChar:                                 ; 表示文字
   814 00000523 00                              DB      0x00
   815                                  
   816                                  
   817                                  ; //////////////////////////////////////////////////////////////////////////// ;
   818                                  ; --- サブルーチン ---
   819                                  ;  ██████╗██╗   ██╗██████╗      ██████╗  ██████╗ ██╗   ██╗████████╗██╗███╗  ██╗███████╗
   820                                  ; ██╔════╝██║   ██║██╔══██╗     ██╔══██╗██╔═══██╗██║   ██║╚══██╔══╝██║████╗ ██║██╔════╝
   821                                  ; ╚█████╗ ██║   ██║██████╔╝     ██████╔╝██║   ██║██║   ██║   ██║   ██║██╔██╗██║███████╗
   822                                  ;  ╚═══██╗██║   ██║██╔══██╗     ██╔══██╗██║   ██║██║   ██║   ██║   ██║██║╚████║██╔════╝
   823                                  ; ██████╔╝╚██████╔╝██████╔╝     ██║  ██║╚██████╔╝╚██████╔╝   ██║   ██║██║ ╚███║███████╗
   824                                  ; ╚═════╝  ╚═════╝ ╚═════╝      ╚═╝  ╚═╝ ╚═════╝  ╚═════╝    ╚═╝   ╚═╝╚═╝  ╚══╝╚══════╝
   825                                  ; //////////////////////////////////////////////////////////////////////////// ;
   826                                  
   827                                  ; カーソル表示更新
   828                                  ; in  : (なし)
   829                                  ; out : (なし)
   830                                  rSetCursol:
   831 00000524 E82601                          CALL    rPushReg                ; レジスタ退避
   832                                  
   833 00000527 B402                            MOV     AH, 0x02
   834 00000529 B700                            MOV     BH, 0x00
   835 0000052B 8A16[E900]                      MOV BYTE DL, [sXpos]
   836 0000052F 8A36[EA00]                      MOV BYTE DH, [sYpos]
   837 00000533 CD10                            INT     0x10
   838                                  
   839 00000535 E83201                          CALL    rPopReg                 ; レジスタ取得
   840 00000538 C3                              RET
   841                                  
   842                                  ; シェル入力をディスプレイとバッファに格納する
   843                                  ; in  : (なし)
   844                                  ; out : AH      0: 続ける
   845                                  ;               1: 終了(enterキー)
   846                                  ;               2: バッファオーバーフロー
   847                                  rOneLineInput:
   848 00000539 E81101                          CALL    rPushReg                ; レジスタ退避
   849 0000053C C606[9205]00                    MOV BYTE [.aChar], 0x00         ; 戻り値設定
   850                                  
   851                                          ; 入力から1文字取得 ---->
   852 00000541 B400                            MOV     AH, 0x00                ; 1文字取得
   853 00000543 CD16                            INT     0x16
   854                                          ; <---- 入力から1文字取得
   855                                  
   856                                          ; 印字可能文字の判定 ---->
   857 00000545 3C0D                            CMP     AL, 0x0d                ; enterで終了
   858 00000547 740D                            JZ      .caseEnter
   859 00000549 E820FE                          CALL    libIsprint              ; 印字可能文字か判定
   860 0000054C 80FC00                          CMP     AH, 0x00
   861 0000054F 740F                            JZ      .caseNotEnter
   862                                          ; <---- 印字可能文字の判定
   863                                  
   864                                          ; 画面への反映 ---->
   865 00000551 E8A4FF                          CALL    libPutchar              ; 1文字出力
   866 00000554 EB0A                            JMP     .caseNotEnter
   867                                          ; <---- 画面への反映
   868                                  
   869                                          ; カーソル位置更新 ---->
   870                                  .caseEnter:                             ; enterを入力した場合
   871 00000556 E869FF                          CALL    libSetCursolNextLine    ; 改行用のカーソル移動
   872 00000559 C606[9205]01                    MOV BYTE [.aChar], 0x01         ; 戻り値設定
   873 0000055E EB2A                            JMP     .exitLoutine            ; 格納せず終了
   874                                  .caseNotEnter:                          ; enter以外を入力した場合
   875 00000560 E83BFF                          CALL    libSetCursolNextCol     ; 通常用のカーソル移動
   876 00000563 C606[9205]00                    MOV BYTE [.aChar], 0x00         ; 戻り値設定
   877 00000568 EB00                            JMP     .setBuf                 ; バッファに格納
   878                                          ; <---- カーソル位置更新
   879                                  .setBuf:                                ; バッファに文字を格納する
   880                                          ; debug ---->
   881                                          ;JMP     .exitLoutine
   882                                          ; <---- debug
   883                                  
   884                                          ; セグメント設定 ---->
   885 0000056A 1E                              PUSH    DS
   886 0000056B B80000                          MOV     AX, 0x0000              ; debug
   887 0000056E 8ED8                            MOV     DS, AX
   888                                          ; <---- セグメント設定
   889                                  
   890                                          ; バッファに格納 ---->
   891 00000570 BF[F000]                        MOV     DI, sOneLineBuf         ; 配列の先頭ポインタ
   892                                         ; ADD WORD DI, [sOneLineSeek]     ; 配列のオフセット
   893 00000573 81C70040                        ADD WORD DI, 0x4000
   894 00000577 8A26[9305]                      MOV BYTE AH, [.aRet]
   895 0000057B 3E8825                          MOV BYTE [DS:DI], AH            ; 格納
   896                                          ; <---- バッファに格納
   897                                  
   898                                          ; オフセットシーク ---->
   899 0000057E 8B0E[F001]                      MOV WORD CX, [sOneLineSeek]
   900 00000582 41                              INC     CX
   901 00000583 890E[F001]                      MOV WORD [sOneLineSeek], CX
   902                                          ; <---- オフセットシーク
   903                                  
   904                                          ; セグメント戻す ---->
   905 00000587 1F                              POP     DS
   906                                          ; <---- セグメント戻す
   907                                          
   908 00000588 EB00                            JMP     .exitLoutine
   909                                  .exitLoutine:
   910 0000058A E8DD00                          CALL    rPopReg                 ; レジスタ取得
   911 0000058D 8A26[9305]                      MOV BYTE AH, [.aRet]
   912 00000591 C3                              RET
   913                                  .aChar:                                 ; 取得文字
   914 00000592 00                              DB      0x00
   915                                  .aRet:                                  ; 戻り値
   916 00000593 00                              DB      0x00
   917                                  
   918                                  ; 入力バッファをクリアする
   919                                  ; in  : (なし)
   920                                  ; out : (なし)
   921                                  rOneLineClear:
   922 00000594 E8B600                          CALL    rPushReg                ; レジスタ退避
   923                                  
   924 00000597 B80000                          MOV     AX, 0x0000
   925 0000059A 8ED8                            MOV     DS, AX
   926 0000059C 8EC0                            MOV     ES, AX
   927 0000059E 8ED0                            MOV     SS, AX
   928 000005A0 BF[F000]                        MOV WORD DI, sOneLineBuf
   929 000005A3 B90000                          MOV     CX, 0x0000
   930                                  .clearLoop:                             ; 0埋め
   931 000005A6 3EC60500                        MOV BYTE [DS:DI], 0x00
   932 000005AA 41                              INC     CX
   933 000005AB 47                              INC     DI
   934 000005AC 81F90001                        CMP     CX, 0x0100
   935 000005B0 75F4                            JNZ     .clearLoop
   936                                  
   937 000005B2 C706[F001]0000                  MOV WORD [sOneLineSeek], 0x0000 ; バッファシークリセット
   938 000005B8 8B3E[F000]                      MOV WORD DI, [sOneLineBuf]
   939                                  
   940 000005BC E8AB00                          CALL    rPopReg                 ; レジスタ取得
   941 000005BF C3                              RET
   942                                  
   943                                  ; malloc 用のアロケーションメモリとアロケーションテーブルを初期化
   944                                  ; アロケーションメモリ 0x10000 ~ 0x1ffff
   945                                  ; アロケーションテーブル 0x01000 ~ 0x01fff
   946                                  ; in  : なし
   947                                  ; out : なし
   948                                  rInitMalloc:
   949 000005C0 E88A00                          CALL    rPushReg                ; レジスタ退避
   950                                  
   951 000005C3 8CC0                            MOV     AX, ES
   952 000005C5 50                              PUSH    AX
   953 000005C6 B80000                          MOV     AX, 0x0000
   954 000005C9 8EC0                            MOV     ES, AX
   955 000005CB BD0010                          MOV     BP, 0x1000
   956                                  .initLoop:
   957 000005CE 26C6460000                      MOV BYTE [ES:BP], 0x00
   958 000005D3 45                              INC     BP
   959 000005D4 81FD0020                        CMP     BP, 0x2000
   960 000005D8 75F4                            JNZ     .initLoop
   961                                  
   962 000005DA 58                              POP     AX
   963 000005DB 8EC0                            MOV     ES, AX
   964                                  %ifdef __DEBUG
   965                                          ;MOV     CX, 0x0012              ; 動的確保テスト
   966                                          ;CALL    sysMalloc
   967                                          ;MOV     CX, 0x0034
   968                                          ;CALL    sysMalloc
   969                                          ;PUSH    BP
   970                                          ;MOV     CX, 0x0056
   971                                          ;CALL    sysMalloc
   972                                          ;POP     BP
   973                                          ;CALL    sysFree
   974                                          ;MOV     AX, 0x1010
   975                                          ;MOV     BP, AX
   976                                          ;CALL    sysFree
   977                                          
   978                                          ;PUSH    DS                      ; アロケーションテーブル
   979                                          ;MOV     AX, 0x0000
   980                                          ;MOV     DS, AX
   981                                          ;MOV     AX, 0x0200
   982                                          ;MOV     DI, 0x1000
   983                                          ;CALL    dbgDump
   984                                          ;POP     DS
   985                                  %endif
   986 000005DD E88A00                          CALL    rPopReg                 ; レジスタ取得
   987 000005E0 C3                              RET
   988                                  
   989                                  ; mashのバージョン表示
   990                                  ; ロゴとバージョンについて記載する
   991                                  ; in  : なし
   992                                  ; out : なし
   993                                  cmdVer:
   994 000005E1 E86900                          CALL    rPushReg                ; レジスタ退避
   995 000005E4 B80000                          MOV     AX, 0x0000
   996 000005E7 8ED0                            MOV     SS, AX
   997 000005E9 BD[0300]                        MOV     BP, cMashLogo           ; ロゴの表示
   998 000005EC B90000                          MOV     CX, 0x0000
   999                                  .loophead:
  1000 000005EF 51                              PUSH    CX                      ; ループ変数格納
  1001 000005F0 B413                            MOV     AH, 0x13
  1002 000005F2 B001                            MOV     AL, 0x01
  1003 000005F4 B700                            MOV     BH, 0
  1004 000005F6 3E8A1E[EB00]                    MOV     BL, [DS:sColorNormal]
  1005 000005FB B92300                          MOV     CX, 35                  ; 1行35文字
  1006 000005FE 3E8A36[EA00]                    MOV     DH, [DS:sYpos]
  1007 00000603 3E8A16[E900]                    MOV     DL, [DS:sXpos]
  1008 00000608 CD10                            INT     0x10
  1009                                  
  1010 0000060A 83C523                          ADD     BP, 35                  ; 1行35文字
  1011 0000060D 59                              POP     CX                      ; ループ変数取得
  1012 0000060E 3EC606[E900]00                  MOV BYTE [DS:sXpos], 0x00
  1013 00000614 3EFE06[EA00]                    INC BYTE [DS:sYpos]
  1014 00000619 41                              INC     CX
  1015 0000061A 83F906                          CMP     CX, 0x0006
  1016 0000061D 75D0                            JNZ     .loophead    
  1017                                  .next:
  1018 0000061F BD[D700]                        MOV     BP, cVersionStr
  1019 00000622 B413                            MOV     AH, 0x13                ; 版数の表示
  1020 00000624 B001                            MOV     AL, 0x01
  1021 00000626 B700                            MOV     BH, 0
  1022 00000628 3E8A1E[EB00]                    MOV     BL, [DS:sColorNormal]
  1023 0000062D 3E8B0E[D500]                    MOV     CX, [DS:cVersionLen]
  1024 00000632 3E8A36[EA00]                    MOV     DH, [DS:sYpos]
  1025 00000637 3E8A16[E900]                    MOV     DL, [DS:sXpos]
  1026 0000063C CD10                            INT     0x10
  1027 0000063E 3EC606[E900]00                  MOV BYTE [DS:sXpos], 0x00
  1028 00000644 3EFE06[EA00]                    INC BYTE [DS:sYpos]
  1029 00000649 E81E00                          CALL    rPopReg                 ; レジスタ取得
  1030 0000064C C3                              RET
  1031                                          
  1032                                  ; 全レジスタの退避
  1033                                  ; 呼んだあと必ず rPopReg を呼ぶこと
  1034                                  ; 呼ぶ前 SP <- サブルーチンへのポインタ
  1035                                  ; 呼び後 SP <- BP <- DI <- SI <- DX <- CX <- BX <- AX
  1036                                  ; in  : reg     レジスタ
  1037                                  ; out : なし
  1038                                                                          ; tempAX    retAddr AX  stack
  1039                                  rPushReg:                               ; ??        ??      AX  ret
  1040 0000064D A3[6606]                        MOV     [.tempAX], AX           ; AX        ??      AX  ret
  1041 00000650 58                              POP     AX                      ; AX        ??      ret (空)
  1042 00000651 A3[6806]                        MOV WORD    [.retAddr], AX      ; AX        ret     ret (空)
  1043 00000654 A1[6606]                        MOV     AX, [.tempAX]           ; AX        ret     AX  (空)
  1044                                  
  1045 00000657 50                              PUSH    AX                      ; AX        ret     AX  AX
  1046 00000658 53                              PUSH    BX                      ; AX        ret     AX  BX)AX
  1047 00000659 51                              PUSH    CX                      ; AX        ret     AX  CX)BX)AX
  1048 0000065A 52                              PUSH    DX                      ; AX        ret     AX  DX)CX)BX)AX
  1049 0000065B 56                              PUSH    SI                      ; AX        ret     AX  SI)DX)CX)BX)AX
  1050 0000065C 57                              PUSH    DI                      ; AX        ret     AX  DI)SI)DX)CX)BX)AX
  1051 0000065D 55                              PUSH    BP                      ; AX        ret     AX  BP)DI)SI)DX)CX)BX)AX
  1052                                  
  1053 0000065E A1[6806]                        MOV WORD    AX, [.retAddr]      ; AX        ret     AX  BP)DI)SI)DX)CX)BX)AX
  1054 00000661 50                              PUSH    AX                      ; AX        ret     ret ret)BP)DI)SI)DX)CX)BX)AX
  1055 00000662 A1[6606]                        MOV     AX, [.tempAX]           ; AX        ret     AX  ret)BP)DI)SI)DX)CX)BX)AX
  1056 00000665 C3                              RET                             ; AX        ret     ret BP)DI)SI)DX)CX)BX)AX
  1057                                  .tempAX:                                ; AXレジスタを一時的に格納
  1058 00000666 0000                            DB      0x00, 0x00
  1059                                  .retAddr:                               ; ルーチンのリターンアドレス
  1060 00000668 0000                            DB      0x00, 0x00
  1061                                  
  1062                                  ; レジスタの復帰
  1063                                  ; 呼ぶ前に必ず rPushReg を呼ぶこと
  1064                                  ; 呼ぶ前 SP <- サブルーチンへのポインタ <- BP <- DI <- SI <- DX <- CX <- BX <- AX
  1065                                  ; 呼び後 SP
  1066                                  ; in  : なし
  1067                                  ; out : reg     レジスタ
  1068                                                                          ; tempAX    retAddr AX  stack
  1069                                  rPopReg:                                ; ??        ??      AX  ret)BP)DI)SI)DX)CX)BX)AX
  1070 0000066A 58                              POP     AX                      ; ??        ??      ret BP)DI)SI)DX)CX)BX)AX
  1071 0000066B A3[8206]                        MOV WORD    [.retAddr], AX      ; ??        ret     ret BP)DI)SI)DX)CX)BX)AX
  1072                                  
  1073 0000066E 5D                              POP     BP                      ; ??        ret     ret DI)SI)DX)CX)BX)AX
  1074 0000066F 5F                              POP     DI                      ; ??        ret     ret SI)DX)CX)BX)AX
  1075 00000670 5E                              POP     SI                      ; ??        ret     ret DX)CX)BX)AX
  1076 00000671 5A                              POP     DX                      ; ??        ret     ret CX)BX)AX
  1077 00000672 59                              POP     CX                      ; ??        ret     ret BX)AX
  1078 00000673 5B                              POP     BX                      ; ??        ret     ret AX
  1079 00000674 58                              POP     AX                      ; ??        ret     AX  (なし)
  1080                                  
  1081 00000675 A3[8006]                        MOV     [.tempAX], AX           ; AX        ret     AX  (なし)
  1082 00000678 A1[8206]                        MOV WORD    AX, [.retAddr]      ; AX        ret     ret (なし)
  1083 0000067B 50                              PUSH    AX                      ; AX        ret     ret ret
  1084 0000067C A1[8006]                        MOV     AX, [.tempAX]           ; AX        ret     AX  ret
  1085 0000067F C3                              RET                             ; AX        ret     AX
  1086                                  .tempAX:                                ; AXレジスタを一時的に格納
  1087 00000680 0000                            DB      0x00, 0x00
  1088                                  .retAddr:                               ; ルーチンのリターンアドレス
  1089 00000682 0000                            DB      0x00, 0x00
  1090                                  
  1091                                  ; ビープ音出力
  1092                                  ; in : なし
  1093                                  ; out: ビープ音
  1094                                  putBeep:
  1095 00000684 B40E                            MOV     AH, 0x0e
  1096 00000686 B041                            MOV     AL, 0x41
  1097 00000688 B700                            MOV     BH, 0x00
  1098 0000068A B301                            MOV     BL, 0x01
  1099 0000068C CD10                            INT     0x10
  1100 0000068E C3                              RET
  1101                                  
  1102                                  ; シリアル1文字出力
  1103                                  ; in  : AL      ascii
  1104                                  ; out : (なし)
  1105                                  dbgSingle:
  1106 0000068F E8BBFF                          CALL    rPushReg                ; レジスタ退避
  1107                                  
  1108 00000692 B401                            MOV     AH, 0x01                ; 書き込み(ALreg)
  1109 00000694 BA0000                          MOV     DX, 0x0000
  1110 00000697 CD14                            INT     0x14
  1111                                  
  1112 00000699 E8CEFF                          CALL    rPopReg                 ; レジスタ取得
  1113 0000069C C3                              RET
  1114                                  
  1115                                  ; デバッグ用ダンプ
  1116                                  ; COM1を使って指定番地から指定バイトをダンプする
  1117                                  ; in  : AX      ダンプするバイト数
  1118                                  ;     : DS:DI   ダンプ開始アドレス
  1119                                  ; out : なし
  1120                                  dbgDump:
  1121 0000069D E8ADFF                          CALL    rPushReg                ; レジスタ退避
  1122                                  
  1123 000006A0 8CDB                            MOV     BX, DS
  1124 000006A2 891E[1607]                      MOV WORD [.focusSeg], BX
  1125 000006A6 893E[1807]                      MOV WORD [.focusAddr], DI
  1126 000006AA A3[1A07]                        MOV WORD [.byteCnt], AX
  1127                                  
  1128 000006AD B400                            MOV     AH, 0x00                ; シリアルポート設定
  1129 000006AF B0E3                            MOV     AL, 0xe3                ; 0bBBBPPSCC, 9600bps, None, 1bit, 8bit
  1130 000006B1 BA0000                          MOV     DX, 0x0000              ; 0ch = COM1, xch = COMx+1
  1131 000006B4 CD14                            INT     0x14
  1132                                  
  1133 000006B6 B00A                            MOV     AL, 0x0a                ; 改行文字
  1134 000006B8 E84F00                          CALL    .putchar
  1135                                  
  1136 000006BB B90000                          MOV     CX, 0x0000
  1137                                  .dumpLoop:
  1138 000006BE 51                              PUSH    CX
  1139 000006BF 8B1E[1607]                      MOV     BX, [.focusSeg]         ; asciiプリント
  1140 000006C3 8EDB                            MOV     DS, BX
  1141 000006C5 8B3E[1807]                      MOV     DI, [.focusAddr]
  1142 000006C9 3E8A05                          MOV     AL, [DS:DI]
  1143                                  
  1144 000006CC 50                              PUSH    AX
  1145 000006CD C0E804                          SHR     AL, 0x04                ; 上4bitプリント
  1146 000006D0 240F                            AND     AL, 0x0f
  1147 000006D2 3C0A                            CMP     AL, 0x0a
  1148 000006D4 7304                            JAE     .upperaf
  1149 000006D6 0430                            ADD     AL, 0x30                ; 0~9
  1150 000006D8 EB02                            JMP     .upperNext
  1151                                  .upperaf:
  1152 000006DA 0437                            ADD     AL, 0x37                ; a~f
  1153                                  .upperNext:
  1154 000006DC E82B00                          CALL    .putchar
  1155                                  
  1156 000006DF 58                              POP     AX
  1157 000006E0 240F                            AND     AL, 0x0f                ; 下4bitプリント
  1158 000006E2 3C0A                            CMP     AL, 0x0a
  1159 000006E4 7304                            JAE     .loweraf
  1160 000006E6 0430                            ADD     AL, 0x30                ; 0~9
  1161 000006E8 EB02                            JMP     .lowerNext
  1162                                  .loweraf:
  1163 000006EA 0437                            ADD     AL, 0x37                ; a~f
  1164                                  .lowerNext:
  1165 000006EC E81B00                          CALL    .putchar
  1166                                  
  1167 000006EF B020                            MOV     AL, 0x20                ; 空白文字
  1168 000006F1 E81600                          CALL    .putchar
  1169                                  
  1170 000006F4 47                              INC     DI
  1171 000006F5 893E[1807]                      MOV WORD [.focusAddr], DI
  1172 000006F9 59                              POP     CX
  1173 000006FA 41                              INC     CX
  1174 000006FB 3B0E[1A07]                      CMP WORD CX, [.byteCnt]
  1175 000006FF 75BD                            JNZ     .dumpLoop
  1176                                  
  1177 00000701 B00A                            MOV     AL, 0x0a                ; 改行文字
  1178 00000703 E80400                          CALL    .putchar
  1179                                  
  1180 00000706 E861FF                          CALL    rPopReg                 ; レジスタ取得
  1181 00000709 C3                              RET
  1182                                  .putchar:                               ; 1文字出力(ALreg)
  1183 0000070A 50                              PUSH    AX
  1184 0000070B 52                              PUSH    DX
  1185 0000070C B401                            MOV     AH, 0x01                ; 書き込み
  1186 0000070E BA0000                          MOV     DX, 0x0000
  1187 00000711 CD14                            INT     0x14
  1188 00000713 5A                              POP     DX
  1189 00000714 58                              POP     AX
  1190 00000715 C3                              RET
  1191                                  .focusSeg:                              ; ダンプするセグメント
  1192 00000716 0000                            DB      0x00, 0x00
  1193                                  .focusAddr:                             ; ダンプするアドレス
  1194 00000718 0000                            DB      0x00, 0x00
  1195                                  .byteCnt:                               ; ダンプするバイト数
  1196 0000071A 0000                            DB      0x00, 0x00
  1197                                  
  1198                                  ; レジスタダンプ
  1199                                  ; 内部で sysMalloc sysFree dbgDump を使用
  1200                                  ; in  : AX, BX, CX, DX, SI, DI, BP, SP, DS, ES, SS
  1201                                  dbgRegDump:
  1202 0000071C E82EFF                          CALL    rPushReg                ; レジスタ退避
  1203 0000071F 1E                              PUSH    DS
  1204                                  
  1205 00000720 16                              PUSH    SS
  1206 00000721 06                              PUSH    ES
  1207 00000722 1E                              PUSH    DS
  1208 00000723 54                              PUSH    SP
  1209 00000724 55                              PUSH    BP
  1210 00000725 57                              PUSH    DI
  1211 00000726 56                              PUSH    SI
  1212 00000727 52                              PUSH    DX
  1213 00000728 51                              PUSH    CX
  1214 00000729 53                              PUSH    BX
  1215 0000072A 50                              PUSH    AX
  1216                                  
  1217 0000072B B91600                          MOV     CX, 22                  ; メモリ確保
  1218 0000072E E828FB                          CALL    sysMalloc
  1219 00000731 892E[6707]                      MOV WORD [.allocAddr], BP
  1220                                  
  1221 00000735 B80000                          MOV     AX, 0x0000
  1222 00000738 8ED8                            MOV     DS, AX
  1223 0000073A B90000                          MOV     CX, 0x0000
  1224                                  .popLoop:                               ; 2wordずつ格納
  1225 0000073D 58                              POP     AX
  1226 0000073E 30C4                            XOR     AH, AL                  ; リトルエンディアン → ビッグエンディアン
  1227 00000740 30E0                            XOR     AL, AH
  1228 00000742 30C4                            XOR     AH, AL
  1229 00000744 3E894600                        MOV WORD [DS:BP], AX
  1230 00000748 83C502                          ADD     BP, 0x0002
  1231 0000074B 41                              INC     CX
  1232 0000074C 83F90B                          CMP     CX, 11
  1233 0000074F 75EC                            JNZ     .popLoop
  1234                                  
  1235 00000751 B81600                          MOV     AX, 22                  ; dbgDump で 表示
  1236 00000754 8B3E[6707]                      MOV     DI, [.allocAddr]
  1237 00000758 E842FF                          CALL    dbgDump
  1238                                  
  1239 0000075B 8B2E[6707]                      MOV WORD BP, [.allocAddr]       ; メモリ解放
  1240 0000075F E8A0FB                          CALL    sysFree
  1241                                  
  1242 00000762 1F                              POP     DS
  1243 00000763 E804FF                          CALL    rPopReg                 ; レジスタ取得
  1244 00000766 C3                              RET
  1245                                  .allocAddr:
  1246 00000767 0000                            DB      0x00, 0x00
  1247                                  
  1248                                  mashHlt:
  1249 00000769 EBFE                            JMP     mashHlt
  1250                                  
  1251                                  ; --- 0埋め ---
  1252                                  secEnd:
  1253 0000076B 00<rep 3895h>                   times 0x4000-($-$$) DB 0        ; mash常駐は16セクタ
